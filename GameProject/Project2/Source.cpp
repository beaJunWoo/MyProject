#define _CRT_SECURE_NO_WARNINGS 1
#include <stdio.h>
#include <Windows.h>
#include <stdlib.h>
#include <time.h>

//버퍼 크기
#define BufferWidth 150
#define BufferHeight 50

//테스트용
#define TestStage LOGO
#define TeatStage_ STAGE1

//로고,메뉴크기
#define MapX 280 
#define MapY 30
#define ScreenX 70
#define RanderSpare 20
#define LogoSize 18
#define MenuSize 18
#define MenuPage 35
#define MenuTitleSize 6

//오브젝트 크기
#define  PlayerSizeX 3
#define  PlayerSizeY 4
#define  EnemySizeX 3
#define  EnemySizeY 4

//각화면 딜레이
#define LogoDelay 100
#define MenuDelay 100
#define StageDelay 50

//무기 설정
#define PistolSpeed 4
#define RifleSpeed 4
#define GunY -2

//오브젝트 할당수
#define enemyCount 20
#define ItemCount 5 
#define playerBulletCount 10
#define patBulletCount 20
#define enemyBulletCount 30
#define TrapCount 100

//방향
#define RIGHT_ x+1
#define LEFT_ x-1
#define UP_ y-1
#define DOWN_ y+1

//define↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑
//define↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑

ULONGLONG deltatime = GetTickCount64();


//첫 가이드 세팅
int guideStartTime = 0;
int guideEndTime = 0;
bool guideMove = true;
bool guideAttack = true;
bool guideJump = true;
int DieInfoTime_Start = 0;
int DieInfoTime_End = 0;
int saveMap[MapY][MapX];

const char* LogoTitle[LogoSize];
const char* MenuTitle[MenuTitleSize];
const char* MenuMap[MenuPage][MenuSize];
const char* bulletShape[4][8];
const char* WeaphoneMap[3][3];
const char* stageUI[6][6];
const char* DieUI[8];
const char* WinUI[8];


char* Bullet1_Num = (char*)malloc(sizeof(char));
char* Bullet2_Num = (char*)malloc(sizeof(char));

const float G = 9.81;
const float BombG = 9.81;

float V = 13.0f;
float TIME = 0.f;
int jumpTime = 0;
int MapPos = 0;
int RetryCount = 3;
int RandomSponeDelay = 0;
int DieTime = 0;
int countTime = 0;

int keyInfoDelay[2] = { 3,0 };
bool isKeyInfo = false;
bool playerDie = false;

#pragma region Enum
enum Menu
{
	EXIT,
	LOGO,
	MENU,
	GAME,
};
enum Stage
{
	STAGE1,
	STAGE2,
	STAGE3,
	STAGE4,
	STAGE_Boss1,
	STAGE6,
	STAGE7,
	STAGE8,
	STAGE9,
	STAGE10,
	STAGE11,
	STAGE12,
	STAGE13,
	STAGE14,
	STAGE15,
	STAGE16,
};
enum Color
{
	BLACK,
	BLUE,
	GREEN,
	CYAN,
	RED,
	MAGENTA,
	BROWN,
	LIGHTGRAY,
	DARKGRAY,
	LIGHTBLUE,
	LIGHTGREEN,
	LIGHTCYAN,
	LIGHTRED,
	LIGHTMAGENTA,
	YELLOW,
	WHITE,
};
Menu menu = TestStage; //테스트중
Stage stage = TeatStage_;
enum ItemEffect
{
	HEAL,
	ADD_02,    //2번 총알 추가
	ADD_bomb,
};
enum BuffEffect
{
	PLUS_PAT_DAMAGE,
	PLUS_MAX_HP,
	PLUS_PISTOL_DAMAGE,
	PLUS_RETRY,
};
enum Direction
{
	STAND,
	LEFT,
	RIGHT,
	UP,
	DOWN,
	L_UP,
	L_DOWN,
	R_UP,
	R_DOWN
};
enum Weapone
{
	PISTOL,
	RIFLE,
	BOMB,
};
enum Delay
{
	NOW_TIME,
	MAX_TIME
};
#pragma endregion

#pragma region DoubleBuffer
HANDLE hBuffer[2];
int screenIndex;
void InitBuffer();
void WriteBuffer(int x, int y, const char* shape, int color);
void FlipBuffer();
void ClearBuffer();
void DestroyBuffer();
#pragma endregion

#pragma region Map
int stage1_Map[MapY][MapX] =
{   //                    10                  20                  30                  40                  50                  60 
	//0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6},//1
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6},//0
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6},//0
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6},//0
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6},//0
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6},//0
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6},//0
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6},//0
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6},//0
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6},//0	00
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6},//0
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6},//0
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6},//0
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6},//0
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6},//0
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6},//0
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,1,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6},//0
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6},//0
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6},//9
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6},//0	00
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,6},//0
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,1,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6},//0
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,1,0,0,0,0,0,0,4,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//0
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//0
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,0,0,0,0,4,0,0,0,0,0,4,0,0,0,6,6,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//0
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,0,0,0,0,4,0,0,0,0,0,4,0,0,0,6,6,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//0
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,0,0,0,0,4,0,0,0,0,0,4,0,0,0,6,6,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,6,6,6,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,4,0,0,0,0,0,0,0,0,6,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0},//0
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,0,0,0,0,4,0,0,0,0,0,4,0,0,0,6,6,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,6,6,6,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,6,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//0
	{6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6},//9

};
int(*pMap1)[MapX] = stage1_Map;
int stage2_Map[MapY][MapX] =
{   //                    10                  20                  30                  40                  50                  60 
	//0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,4,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6},//1
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,1,0,0,0,4,0,0,0,0,1,0,0,0,4,0,0,0,0,1,0,0,0,4,0,0,0,0,0,1,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,4,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6},//0
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,4,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6},//0
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,4,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6},//0
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,4,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6},//0
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,3,0,0,0,0,0,4,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,1,0,0,0,4,0,0,1,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6},//0
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,4,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6},//0
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,4,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6},//8
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,4,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6},//0
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,4,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6},//0	00
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,4,0,0,0,0,0,4,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6},//0
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,4,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6},//0
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,4,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,1,0,0,0,0,4,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6},//0
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6},//0
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,5,6,0,0,0,0,0,0,0,0,0,0,0,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6},//0
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,6,0,0,0,0,0,0,6,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,5,6,0,0,0,0,0,0,0,0,0,0,0,0,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6},//0
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,5,6,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6},//0
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,5,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6},//8
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6},//9
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,5,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6},//0	00
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,1,0,0,4,0,1,0,0,4,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,5,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6},//0
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,4,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,5,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6},//0
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,4,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//0
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,0,0,0,0,0,0,4,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,5,5,5,5,5,5,5,5,5,0,0,1,0,0,0,0,0,0,0,0,0,5,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//0
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,4,6,6,6,6,4,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,5,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//0
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,6,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,5,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//0
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,4,4,4,4,4,4,4,4,4,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,5,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//0
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,5,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//0
	{6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6},//9

};
int(*pMap2)[MapX] = stage2_Map;

int stage3_Map[MapY][MapX] =
{   //                    10                  20                  30                  40                  50                  60 
	//0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6},//1
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,1,0,0,0,1,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6},//0
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6},//0
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6},//0
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6},//0
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,5,5,5,5,5,5,5,5,5,5,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6},//0
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6},//0
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,6,6,6,6,6,6,6,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6},//8
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,6,6,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6},//0
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,6,0,0,0,6,6,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6},//0	00
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,6,6,0,0,0,0,0,4,0,0,0,4,0,0,6,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6},//0
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,6,6,0,0,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6},//0
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,0,0,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6},//0
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,0,0,2,0,0,4,0,2,0,4,0,2,0,4,0,2,0,4,0,2,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,2,0,0,0,2,0,0,0,2,0,0,6,0,0,0,0,0,0,0,0,0,6,0,0,0,2,0,0,0,1,0,0,0,0,2,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6},//0
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,6,6,0,0,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,2,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,4,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6},//0
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,0,0,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,4,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6},//0
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,0,0,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,4,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6},//0
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,0,0,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,4,0,1,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6},//8
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,5,5,5,5,5,5,5,5,5,5,5,5,5,6,0,0,0,0,0,0,0,0,0,6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,0,0,0,0,0,0,0,0,0,4,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//9
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//0	00
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//0
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//0
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,2,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//0
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,5,5,5,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//0
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,5,0,5,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//0
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,5,0,5,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,5,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//0
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,5,0,5,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,5,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//0
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,3,0,0,0,0,3,0,0,7,0,0,0,0,0,3,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,8,8,8,8,8,8,0,0,0,0,0,7,8,8,8,8,8,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,5,0,5,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,5,0,0,0,5,0,0,0,0,0,4,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//0
	{6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6},//9

};
int(*pMap3)[MapX] = stage3_Map;

int stage4_Map[MapY][MapX] =
{   //                    10                  20                  30                  40                  50                  60 
	//0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,},//1
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,1,0,4,0,0,1,0,0,4,0,1,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,4,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,},//0
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,4,0,0,0,0,0,4,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,4,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,},//3
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,4,0,0,0,0,0,4,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,4,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,2,0,0,0,0,4,0,0,0,2,0,0,0,0,4,0,0,0,2,0,0,0,4,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,6,},//4
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,4,0,0,0,0,0,4,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,4,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,},//5
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,4,0,0,0,0,0,4,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,1,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,4,0,1,0,0,4,0,0,1,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,},//0
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,4,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,},//7
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,2,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,4,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,0,0,0,0,0,0,6,},//8
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,2,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,4,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,},//0
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,4,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,},//0	00
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,4,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,5,5,5,5,5,5,5,5,5,5,5,5,5,0,0,0,0,0,0,0,0,0,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,},//0
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,},//0
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,},//3
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,4,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,4,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,4,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,1,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,},//4
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,4,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,4,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,4,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,},//5
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,4,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,4,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,4,0,0,0,0,0,4,0,0,0,0,0,0,0,0,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,},//0
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,3,0,0,3,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,6,6,0,0,0,0,0,4,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,4,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,4,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,},//7
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,4,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,4,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,0,0,4,0,0,0,0,4,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,},//8
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0,6,0,0,0,0,0,4,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,4,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,2,0,0,4,0,0,0,2,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,5,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,},//9
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,4,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,4,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,4,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,},//0	00
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,6,6,6,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,4,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,4,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,4,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},//0
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,1,0,0,0,4,0,0,1,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,1,0,0,0,4,0,0,1,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,4,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},//0
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,4,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,4,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,4,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},//3
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,6,6,0,0,0,0,0,4,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,4,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,0,0,0,1,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},//4
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,6,6,6,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,4,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,4,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},//5
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,4,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,4,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},//0
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,4,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,4,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},//7
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,4,0,0,0,0,0,0,4,8,8,8,8,8,8,8,0,0,0,0,0,0,8,8,8,8,8,8,4,0,0,0,0,0,0,4,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,4,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,},//8
	{6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,},//9

};
int(*pMap4)[MapX] = stage4_Map;

int Boss1_Map[MapY][MapX] =
{   //                    10                  20                  30                  40                  50                  60 
	//0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},//1
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},//0
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},//0
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},//0
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},//0
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},//0
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},//0
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},//0
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,5,5,5,5,5,5,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},//0
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},//0	00
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},//0
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},//0
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},//0
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},//0
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},//0
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,5,5,5,5,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},//0
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},//0
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},//0
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},//9
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},//0	00
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},//0
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,5,5,5,5,5,5,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},//0
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},//0
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,5,5,5,5,0,0,0,0,0,5,5,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},//0
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,7,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},//0
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,7,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},//0
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,7,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},//0
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,7,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},//0
	{6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,},//9

};
int(*pBoss1)[MapX] = Boss1_Map;
int Cpy_Map[MapY][MapX] = {};
int KeyInfoMap[10][50] = {
	{3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,4},
	{7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2},
	{7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2},
	{7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2},
	{7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2},
	{7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2},
	{7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2},
	{7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2},
	{7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2},
	{5,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,6},
};
#pragma endregion

#pragma region Struct
struct Player
{
	int x;
	int y;
	Color color;
	int direction;
	int speed[2];
	int bulletNum[3];//[0]=1번무기 탄수
	int bulletDelay[3][2];
	int downHpDelay[2];
	int hp;
	int MaxHp;
	int h;
	int weaponNum;
	int moveDriction;
	int pistolDamage;
	bool isfloat;
	bool isJump;
	bool isDownHp;
	const char* shape[9][PlayerSizeY];
	const char* Weaphone[9][2];
	const char* die;
};
Player* player = {};

struct SavePlayer
{
	int hp;
	int bulletnum[3];
};
SavePlayer* savePlayer = {};

struct Bullet
{
	int x;
	int y;
	int color;
	int Xcount[2];
	int Ycount[2];
	int damage;
	int direction;
	int speed;
	const char* shape[8];
	const char* destroy[8];
};
struct Gun
{
	Bullet* bullet[4] = {};
};
Gun* playerBullet[playerBulletCount] = {};
Bullet* enemyBullet[enemyBulletCount] = {};
Bullet* patBullet[patBulletCount] = {};

struct Enemy
{
	int x;
	int y;
	Color color;
	int Lv;
	int hp;
	int rerodingTime[2];
	int responTime;
	bool isLeft;
	bool isDownHp;
	int downHpDelay[2];
	int moveDir[2] = { 0,0 };
	const char* shape[2][5];
	const char* die[2][5];
};
Enemy* enemy[enemyCount] = {};

struct  ExploeDrone
{
	int x;
	int y;
	int animation;
	bool isFall;
	int moveDelay[2];
	int hp;
	const char* shape[4][3];
};
ExploeDrone* drone = nullptr;

struct Item
{
	int x;
	int y;
	Color color;
	ItemEffect itemEffect;
	const char* shape[3];
};
Item* item[ItemCount] = {};

struct BuffBox
{
	int x;
	int y;
	int Delay;
	bool isGive;
	Color color;
	BuffEffect buffEffect;
	const char* shape[3];
};

BuffBox* buffBox = {};
struct Trap
{
	int x;
	int y;
	int damage;
	int color;
	int attackDelay[2];
	const char* shape;
};
Trap* trap[TrapCount] = {};

struct Bomb
{
	int x;
	int y;
	int direction;
	float time;
	float V;
	int responTime;
	float Xspeed;
	float YSpeed;
	bool isAttack;
	bool isbump;
	const char* shape;
};
Bomb* bomb = {};

struct Pat
{
	float x;
	float y;
	int moveDir;
	int moveDelay[2];
	int bulletDelay[2];
	int expressDellay;
	int damage;
	bool isClimb = false;
	const char* shape[6][4];
};
Pat* pat = {};

struct Boss
{
	int x;
	int y;
	int state;
	int page;
	int hp;
	int floor;
	int MoveDelay;
	int pageCount;
	int expressDellay[2];
	bool is_Move;
	const char* shape[5][9];
};
Boss* boss = {};

struct BossBullet
{
	int x;
	int y;
	const char* shape[3];
};
BossBullet* bossBullet[10] = {};
#pragma endregion



//Function↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓
//Function↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓
#pragma region DoubleBuffer
void InitBuffer();
void WriteBuffer(int x, int y, const char* shape, int color);
void FlipBuffer();
void ClearBuffer();
void DestroyBuffer();
#pragma endregion

#pragma region Logo
void LogoInitialize();
void LogoProgress();
void LogoRender(int Filcker);
void LogoRelease();
#pragma endregion

#pragma region Menu
void MenuInitialize();
void MenuProgress();
void MenuRender(int Num, int& LogoPage);
void MenuRelease();
#pragma endregion

#pragma region Stage
void Stage_progress();
void Stage1();
void Stage2();
void Stage3();
void Stage4();
void Boss1();
#pragma endregion

#pragma region Respone
void RespawnInit(int(*Map)[MapX]);
void SaveMap(int(*Map)[MapX]);
void SavePoint(int(*Map)[MapX]);
int DieProgress();
#pragma endregion

#pragma region Clear
void ClearStage();
#pragma endregion

#pragma region Player
void PlayerInit(int x, int y);
void PlayerProgress(int(*Map)[MapX]);
void PlayerRender();
void PlayerRelease();
void PlayerHpDownEffect();
void PlayerReplace(int x, int y);
void PlayerKnifeAttack();
bool PlayerDieProgress();
#pragma endregion

#pragma region Physics
void PlayerGravity(int(*Map)[MapX]);
void EnemyGravity(int(*Map)[MapX]);
#pragma endregion

#pragma region Bullet
void BulletShapeInit();
void PlayerBulletInit(double speed, int damage, int weaponNumber, int(*Map)[MapX]);
void PlayerBulletProgress(int(*Map)[MapX]);
void EnemyBulletInit(Enemy* enemy);
void EnemyBulletProgress(int(*Map)[MapX]);
void PlayerBombInit();
void BombProgress(int(*Map)[MapX]);
#pragma endregion

#pragma region UI
void MapRender(int(*Map)[MapX]);
void GunUI_Init();
void GunUI_Rander();
void NextPointer_Init(int x, int y);
bool leftScreen = false;
void LeftScreen();
void StageUI_Rander(int stageNum);
void StageUI();
void DieUI_init();
void WinUI_init();
#pragma endregion

#pragma region Enemy
void EnemyRander();
void EnemyInit(int(*Map)[MapX]);
void EnemyPorogress(int(*Map)[MapX]);
void EnemyHpDownEffect();
int ResultEnemyCount();
#pragma endregion

#pragma region RandomSpone
void RandomEnemyInit(int num);
void RandomEnemySpone(int lv);
#pragma endregion

#pragma region Drone
void DroneInit();
void DroneRandomSpone();
void DroneRender();
void DroneProgress();
#pragma endregion

#pragma region Guide
void GuideMove();
void GuideAttack();
void GuideJump();
#pragma endregion

#pragma region pat
void PatInit();
void PatPorogress(int(*Map)[MapX]);
void PatBulletInit();
#pragma endregion

#pragma region Boss
void Boss1_Init(int x, int y);
void Boss1_Rander();
void PlayerAttackBoss();
void Boss1_progress();
void BossBulletRender();
void BossBulletProgress();
#pragma endregion

#pragma region GameFunction
void ItemInit(int x, int y, int ItemNumber);
void MapItemInit(int(*Map)[MapX]);
void ItemProRander();
void TrapInit(int(*Map)[MapX]);
void TrapRander();
void ShowKeyInfo();
void TrapRelease();
#pragma endregion

void RandomBuff_Init(int x, int y);
void RandomBuff_Rander();
void RandomBuff_Progress();

#pragma region Stage
void InitStage(int(*Map)[MapX]);
void RenderStage(int(*Map)[MapX]);
void ProgressStage(int(*Map)[MapX]);
void ClearStage();
#pragma endregion

//Function↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑
//Function↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑

//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓
//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓
int main()
{
	srand(time(NULL));
	InitBuffer();
	BulletShapeInit();
	GunUI_Init();
	DieUI_init();
	StageUI();
	
	while (menu)
	{
		switch (menu)
		{
		case EXIT:
			break;
		case LOGO:
			RetryCount = 3;
 			LogoProgress();
 			break;
		case MENU:
			MenuProgress();
			break;
		case GAME:
			stage = STAGE1;
			Stage_progress();
		default:
			break;
		}
 	}
	DestroyBuffer();
	return 0;
}
//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑
//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑


#pragma region DoubleBuffer
void InitBuffer()
{
	screenIndex = 0;

	COORD size = { BufferWidth, BufferHeight };
	SMALL_RECT rect = { 0, 0, BufferWidth, BufferHeight };

	hBuffer[0] = CreateConsoleScreenBuffer(GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, NULL, CONSOLE_TEXTMODE_BUFFER, NULL);
	SetConsoleScreenBufferSize(hBuffer[0], size);
	SetConsoleWindowInfo(hBuffer[0], TRUE, &rect);

	hBuffer[1] = CreateConsoleScreenBuffer(GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, NULL, CONSOLE_TEXTMODE_BUFFER, NULL);
	SetConsoleScreenBufferSize(hBuffer[1], size);
	SetConsoleWindowInfo(hBuffer[1], TRUE, &rect);

	CONSOLE_CURSOR_INFO Info;
	Info.dwSize = 1;
	Info.bVisible = FALSE;

	SetConsoleCursorInfo(hBuffer[0], &Info);
	SetConsoleCursorInfo(hBuffer[1], &Info);


}
void WriteBuffer(int x, int y, const char* shape, int color)
{
	COORD pos = { x * 2, y };

	SetConsoleCursorPosition(hBuffer[screenIndex], pos);
	SetConsoleTextAttribute(hBuffer[screenIndex], color);

	DWORD dw;
	WriteFile(hBuffer[screenIndex], shape, strlen(shape), &dw, NULL);


}
void FlipBuffer()
{
	SetConsoleActiveScreenBuffer(hBuffer[screenIndex]);
	screenIndex = !screenIndex;
}
void ClearBuffer()
{
	COORD pos = { 0,0 };
	DWORD dw;
	FillConsoleOutputCharacter(hBuffer[screenIndex], ' ', BufferWidth * BufferHeight, pos, &dw);
}
void DestroyBuffer()
{
	CloseHandle(hBuffer[0]);
	CloseHandle(hBuffer[1]);
}
#pragma endregion

#pragma region Logo
void LogoInitialize()
{
	LogoTitle[0] = "                                                                    dddddddd                                                            ";
	LogoTitle[1] = "DDDDDDDDDDDDD                                                       d::::::d  lllllll    iiii                                           ";
	LogoTitle[2] = "D::::::::::::DDD                                                    d::::::d  l:::::l   i::::i                                          ";
	LogoTitle[3] = "D:::::::::::::::DD                                                  d::::::d  l:::::l    iiii                                           ";
	LogoTitle[4] = "DDD:::::DDDDD:::::D                                                 d:::::d   l:::::l                                                   ";
	LogoTitle[5] = "  D:::::D    D:::::D     eeeeeeeeeeee    aaaaaaaaaaaaa      ddddddddd:::::d    l::::l  iiiiiii  nnnn  nnnnnnnn          eeeeeeeeeeee    ";
	LogoTitle[6] = "  D:::::D     D:::::D  ee::::::::::::ee  a::::::::::::a   dd::::::::::::::d    l::::l  i:::::i  n:::nn::::::::nn      ee::::::::::::ee  ";
	LogoTitle[7] = "  D:::::D     D:::::D e::::::eeeee:::::eeaaaaaaaaa:::::a d::::::::::::::::d    l::::l   i::::i  n::::::::::::::nn    e::::::eeeee:::::ee";
	LogoTitle[8] = "  D:::::D     D:::::De::::::e     e:::::e         a::::ad:::::::ddddd:::::d    l::::l   i::::i  nn:::::::::::::::n  e::::::e     e:::::e";
	LogoTitle[9] = "  D:::::D     D:::::De:::::::eeeee::::::e  aaaaaaa:::::ad::::::d    d:::::d    l::::l   i::::i    n:::::nnnn:::::n  e:::::::eeeee::::::e";
	LogoTitle[10] = "  D:::::D     D:::::De:::::::::::::::::e aa::::::::::::ad:::::d     d:::::d    l::::l   i::::i    n::::n    n::::n  e:::::::::::::::::e ";
	LogoTitle[11] = "  D:::::D     D:::::De::::::eeeeeeeeeee a::::aaaa::::::ad:::::d     d:::::d    l::::l   i::::i    n::::n    n::::n  e::::::eeeeeeeeeee  ";
	LogoTitle[12] = "  D:::::D    D:::::D e:::::::e         a::::a    a:::::ad:::::d     d:::::d    l::::l   i::::i    n::::n    n::::n  e:::::::e           ";
	LogoTitle[13] = "DDD:::::DDDDD:::::D  e::::::::e        a::::a    a:::::ad::::::ddddd::::::dd  l::::::l i::::::i   n::::n    n::::n  e::::::::e          ";
	LogoTitle[14] = "D:::::::::::::::DD    e::::::::eeeeeeeea:::::aaaa::::::a d:::::::::::::::::d  l::::::l i::::::i   n::::n    n::::n   e::::::::eeeeeeee  ";
	LogoTitle[15] = "D::::::::::::DDD       ee:::::::::::::e a::::::::::aa:::a d:::::::::ddd::::d  l::::::l i::::::i   n::::n    n::::n    ee:::::::::::::e  ";
	LogoTitle[16] = "DDDDDDDDDDDDD            eeeeeeeeeeeeee  aaaaaaaaaa  aaaa  ddddddddd   ddddd  llllllll iiiiiiii   nnnnnn    nnnnnn      eeeeeeeeeeeeee  ";

}
void LogoProgress()
{
	int LogoPage = 0;
	int Flicker = 0;
	LogoInitialize();
	InitBuffer();
	WinUI_init();
	while (true)
	{
		if (deltatime + LogoDelay <= GetTickCount64())
		{
			deltatime = GetTickCount64();
			LogoRender(Flicker);
			Flicker++;

			if (GetAsyncKeyState(VK_SPACE))
			{
				menu = MENU;
				break;
			}

			FlipBuffer();
			ClearBuffer();
		}
	}
	LogoRelease();

}
void LogoRender(int Filcker)
{

	if (Filcker % 10 > 5)
	{
		WriteBuffer(35, 30, "SPACE를 누르세요", RED);
	}
	for (int i = 0; i < 17; i++)
	{
		WriteBuffer(5, 5 + i, LogoTitle[i], WHITE);
	}
}
void LogoRelease()
{
	for (int i = 0; i < 12; i++)
	{
		LogoTitle[i] = nullptr;
	}
}
#pragma endregion

#pragma region Menu
void MenuInitialize()
{

	MenuTitle[0] = "888888ba                          dP dP oo                  ";
	MenuTitle[1] = "88    `8b                         88 88                     ";
	MenuTitle[2] = "88     88 .d8888b. .d8888b. .d888b88 88 dP 88d888b. .d8888b. ";
	MenuTitle[3] = "88     88 88ooood8 88'  `88 88'  `88 88 88 88'  `88 88ooood8 ";
	MenuTitle[4] = "88    .8P 88.  ... 88.  .88 88.  .88 88 88 88    88 88.  ... ";
	MenuTitle[5] = "8888888P  `88888P' `88888P8 `88888P8 88 dP dP    dP `88888P' ";

	MenuMap[0][0] = "                                                                                                                                   ";
	MenuMap[0][1] = "                                                                                                                                   ";
	MenuMap[0][2] = "                                                                                                                                   ";
	MenuMap[0][3] = "                                                                                                                                   ";
	MenuMap[0][4] = "                                                                                                                                   ";
	MenuMap[0][5] = "                                                                                                                                   ";
	MenuMap[0][6] = "                                                                                                                                   ";
	MenuMap[0][7] = "                                                                                                                                   ";
	MenuMap[0][8] = "                                                                                                                                   ";
	MenuMap[0][9] = "                                                                                                                                   ";
	MenuMap[0][10] = "                                                                                                                                   ";
	MenuMap[0][11] = "                                                                                                                                   ";
	MenuMap[0][12] = "                                                                                                                                   ";
	MenuMap[0][13] = "                                                                                                                                   ";
	MenuMap[0][14] = "                                                                                                                                   ";
	MenuMap[0][15] = "                                                                                                                                   ";
	MenuMap[0][16] = "                                                                                                                                   ";
	MenuMap[0][17] = "                                                                                                                                   ";

	MenuMap[1][0] = "                                                                                                                                   ";
	MenuMap[1][1] = "                                                                                                                                   ";
	MenuMap[1][2] = "                                                                                                                                   ";
	MenuMap[1][3] = "                                                                                                                            11111  ";
	MenuMap[1][4] = "                                                                                                                           11111111";
	MenuMap[1][5] = "                                                                                                                                   ";
	MenuMap[1][6] = "                                                                                                                                   ";
	MenuMap[1][7] = "                                                                                                                                   ";
	MenuMap[1][8] = "                                                                                                                                  1";
	MenuMap[1][9] = "                                                                                                                             111111";
	MenuMap[1][10] = "                                                                                                                            1000000";
	MenuMap[1][11] = "                                                                                                                              11100";
	MenuMap[1][12] = "                                                                                                                               1000";
	MenuMap[1][13] = "                                                                                                                                110";
	MenuMap[1][14] = "                                                                                                                                  1";
	MenuMap[1][15] = "                                                                                                                                   ";
	MenuMap[1][16] = "                                                                                                                                   ";
	MenuMap[1][17] = "                                                                                                                                   ";

	MenuMap[2][0] = "                                                                                                                                   ";
	MenuMap[2][1] = "                                                                                                                                   ";
	MenuMap[2][2] = "                                                                                                                                   ";
	MenuMap[2][3] = "                                                                                                                    11111          ";
	MenuMap[2][4] = "                                                                                                                   1111111111111111";
	MenuMap[2][5] = "                                                                                                                                   ";
	MenuMap[2][6] = "                                                                                                                                   ";
	MenuMap[2][7] = "                                                                                                                                   ";
	MenuMap[2][8] = "                                                                                                                          11111  11";
	MenuMap[2][9] = "                                                                                                                     11111111111  1";
	MenuMap[2][10] = "                                                                                                                    100000001111111";
	MenuMap[2][11] = "                                                                                                                      1110000111111";
	MenuMap[2][12] = "                                                                                                                       100000011111";
	MenuMap[2][13] = "                                                                                                                        11000000111";
	MenuMap[2][14] = "                                                                                                                          110000011";
	MenuMap[2][15] = "                                                                                                                            1111000";
	MenuMap[2][16] = "                                                                                                                                111";
	MenuMap[2][17] = "                                                                                                                                   ";

	MenuMap[3][0] = "                                                                                                                                   ";
	MenuMap[3][1] = "                                                                                                                                   ";
	MenuMap[3][2] = "                                                                                                                                   ";
	MenuMap[3][3] = "                                                                                                            11111                  ";
	MenuMap[3][4] = "                                                                                                           111111111111111111111111";
	MenuMap[3][5] = "                                                                                                                             111111";
	MenuMap[3][6] = "                                                                                                                               1111";
	MenuMap[3][7] = "                                                                                                                               1111";
	MenuMap[3][8] = "                                                                                                                  11111  111   1111";
	MenuMap[3][9] = "                                                                                                             11111111111  1111     ";
	MenuMap[3][10] = "                                                                                                            10000000111111111111111";
	MenuMap[3][11] = "                                                                                                              111000011111111111111";
	MenuMap[3][12] = "                                                                                                               10000001111111111111";
	MenuMap[3][13] = "                                                                                                                1100000011111111111";
	MenuMap[3][14] = "                                                                                                                  11000001100000001";
	MenuMap[3][15] = "                                                                                                                    111100000000000";
	MenuMap[3][16] = "                                                                                                                        11111111111";
	MenuMap[3][17] = "                                                                                                                                   ";

	MenuMap[4][0] = "                                                                                                                                 11";
	MenuMap[4][1] = "                                                                                                                                   ";
	MenuMap[4][2] = "                                                                                                                                   ";
	MenuMap[4][3] = "                                                                                                    11111                        11";
	MenuMap[4][4] = "                                                                                                   11111111111111111111111111111111";
	MenuMap[4][5] = "                                                                                                                     11111111111111";
	MenuMap[4][6] = "                                                                                                                       111111111110";
	MenuMap[4][7] = "                                                                                                                       111111111111";
	MenuMap[4][8] = "                                                                                                          11111  111   111111111111";
	MenuMap[4][9] = "                                                                                                     11111111111  1111        11111";
	MenuMap[4][10] = "                                                                                                    1000000011111111111111111111111";
	MenuMap[4][11] = "                                                                                                      11100001111111111111111111111";
	MenuMap[4][12] = "                                                                                                       1000000111111111111111111111";
	MenuMap[4][13] = "                                                                                                        110000001111111111111111111";
	MenuMap[4][14] = "                                                                                                          1100000110000000111111111";
	MenuMap[4][15] = "                                                                                                            11110000000000000000000";
	MenuMap[4][16] = "                                                                                                                1111111111111111111";
	MenuMap[4][17] = "                                                                                                                                   ";

	MenuMap[5][0] = "                                                                                                                         1111111111";
	MenuMap[5][1] = "                                                                                                                            1000001";
	MenuMap[5][2] = "                                                                                                                             11 11 ";
	MenuMap[5][3] = "                                                                                            11111                        1111111111";
	MenuMap[5][4] = "                                                                                           1111111111111111111111111111111111111111";
	MenuMap[5][5] = "                                                                                                             1111111111111111111111";
	MenuMap[5][6] = "                                                                                                               11111111111001111111";
	MenuMap[5][7] = "                                                                                                               11111111111111111111";
	MenuMap[5][8] = "                                                                                                  11111  111   11111111111111111111";
	MenuMap[5][9] = "                                                                                             11111111111  1111        1111111111111";
	MenuMap[5][10] = "                                                                                            100000001111111111111111111111110000000";
	MenuMap[5][11] = "                                                                                              1110000111111111111111111111111110000";
	MenuMap[5][12] = "                                                                                               100000011111111111111111111111110000";
	MenuMap[5][13] = "                                                                                                11000000111111111111111111111110000";
	MenuMap[5][14] = "                                                                                                  110000011000000011111111111110000";
	MenuMap[5][15] = "                                                                                                    1111000000000000000000000000000";
	MenuMap[5][16] = "                                                                                                        1111111111111111111111  1  ";
	MenuMap[5][17] = "                                                                                                                                   ";

	MenuMap[6][0] = "                                                                                                                 1111111111        ";
	MenuMap[6][1] = "                                                                                                                    1000001     111";
	MenuMap[6][2] = "                                                                                                                     11 11     1101";
	MenuMap[6][3] = "                                                                                    11111                        111111111111111111";
	MenuMap[6][4] = "                                                                                   11111111111111111111111111111111111111111111111 ";
	MenuMap[6][5] = "                                                                                                     11111111111111111111111111111 ";
	MenuMap[6][6] = "                                                                                                       111111111110011111111111111 ";
	MenuMap[6][7] = "                                                                                                       1111111111111111111111111111";
	MenuMap[6][8] = "                                                                                          11111  111   1111111111111111111111111111";
	MenuMap[6][9] = "                                                                                     11111111111  1111        11111111111111  11   ";
	MenuMap[6][10] = "                                                                                    100000001111111111111111111111110000000        ";
	MenuMap[6][11] = "                                                                                      11100001111111111111111111111111100001       ";
	MenuMap[6][12] = "                                                                                       10000001111111111111111111111111000011111111";
	MenuMap[6][13] = "                                                                                        1100000011111111111111111111111000011000111";
	MenuMap[6][14] = "                                                                                          11000001100000001111111111111000010001111";
	MenuMap[6][15] = "                                                                                            111100000000000000000000000000000000111";
	MenuMap[6][16] = "                                                                                                1111111111111111111111  1  00000111";
	MenuMap[6][17] = "                                                                                                                           11111111";

	MenuMap[7][0] = "                                                                                                         1111111111                ";
	MenuMap[7][1] = "                                                                                                            1000001     1111111111 ";
	MenuMap[7][2] = "                                                                                                             11 11     110111101111";
	MenuMap[7][3] = "                                                                            11111                        11111111111111111111111 11";
	MenuMap[7][4] = "                                                                           11111111111111111111111111111111111111111111111 11111111";
	MenuMap[7][5] = "                                                                                             11111111111111111111111111111 11111111";
	MenuMap[7][6] = "                                                                                               111111111110011111111111111  1111111";
	MenuMap[7][7] = "                                                                                               111111111111111111111111111111111111";
	MenuMap[7][8] = "                                                                                  11111  111   111111111111111111111111111111111111";
	MenuMap[7][9] = "                                                                             11111111111  1111        11111111111111  11       11  ";
	MenuMap[7][10] = "                                                                            100000001111111111111111111111110000000            11  ";
	MenuMap[7][11] = "                                                                              11100001111111111111111111111111100001           11  ";
	MenuMap[7][12] = "                                                                               1000000111111111111111111111111100001111111111111111";
	MenuMap[7][13] = "                                                                                110000001111111111111111111111100001100011100011101";
	MenuMap[7][14] = "                                                                                  1100000110000000111111111111100001000111110111111";
	MenuMap[7][15] = "                                                                                    11110000000000000000000000000000000011110111111";
	MenuMap[7][16] = "                                                                                        1111111111111111111111  1  0000011100011100";
	MenuMap[7][17] = "                                                                                                                   11111111111     ";

	MenuMap[8][0] = "                                                                                                 1111111111                        ";
	MenuMap[8][1] = "                                                                                                    1000001     1111111111         ";
	MenuMap[8][2] = "                                                                                                     11 11     110111101111        ";
	MenuMap[8][3] = "                                                                    11111                        11111111111111111111111 111  1    ";
	MenuMap[8][4] = "                                                                   11111111111111111111111111111111111111111111111 1111111111111111";
	MenuMap[8][5] = "                                                                                     11111111111111111111111111111 1111111111111111";
	MenuMap[8][6] = "                                                                                       111111111110011111111111111  111111111111111";
	MenuMap[8][7] = "                                                                                       11111111111111111111111111111111111111111111";
	MenuMap[8][8] = "                                                                          11111  111   11111111111111111111111111111111111111111111";
	MenuMap[8][9] = "                                                                     11111111111  1111        11111111111111  11       11   11 11  ";
	MenuMap[8][10] = "                                                                    100000001111111111111111111111110000000            11    1  1  ";
	MenuMap[8][11] = "                                                                      11100001111111111111111111111111100001           11   11  1  ";
	MenuMap[8][12] = "                                                                       100000011111111111111111111111110000111111111111111111111111";
	MenuMap[8][13] = "                                                                        11000000111111111111111111111110000110001110001110111011111";
	MenuMap[8][14] = "                                                                          110000011000000011111111111110000100011111011111111111111";
	MenuMap[8][15] = "                                                                            1111000000000000000000000000000000001111011111111111111";
	MenuMap[8][16] = "                                                                                1111111111111111111111  1  000001110001110000011111";
	MenuMap[8][17] = "                                                                                                           11111111111             ";

	MenuMap[9][0] = "                                                                              1111111111                                           ";
	MenuMap[9][1] = "                                                                                 1000001     1111111111                            ";
	MenuMap[9][2] = "                                                                                  11 11     110111101111                           ";
	MenuMap[9][3] = "                                                 11111                        11111111111111111111111 111  1    1                  ";
	MenuMap[9][4] = "                                                11111111111111111111111111111111111111111111111 1111111111111111111                ";
	MenuMap[9][5] = "                                                                  11111111111111111111111111111 11111111111111111111111            ";
	MenuMap[9][6] = "                                                                    111111111110011111111111111  111111111111111111111             ";
	MenuMap[9][7] = "                                                                    111111111111111111111111111111111111111111111111111            ";
	MenuMap[9][8] = "                                                       11111  111   111111111111111111111111111111111111111111111111111            ";
	MenuMap[9][9] = "                                                  11111111111  1111        11111111111111  11       11   11 11  11111  1           ";
	MenuMap[9][10] = "                                                 100000001111111111111111111111110000000            11    1  1  11                 ";
	MenuMap[9][11] = "                                                   11100001111111111111111111111111100001           11   11  1  11                 ";
	MenuMap[9][12] = "                                                    10000001111111111111111111111111000011111111111111111111111111111111           ";
	MenuMap[9][13] = "                                                     1100000011111111111111111111111000011000111000111011101111111111111           ";
	MenuMap[9][14] = "                                                       11000001100000001111111111111000010001111101111111111111111111111           ";
	MenuMap[9][15] = "                                                         111100000000000000000000000000000000111101111111111111111011001           ";
	MenuMap[9][16] = "                                                             1111111111111111111111  1  000001110001110000011111111111             ";
	MenuMap[9][17] = "                                                                                        11111111111                                ";

	MenuMap[10][0] = "                                                                  1111111111                                                      ";
	MenuMap[10][1] = "                                                                     1000001     1111111111                                       ";
	MenuMap[10][2] = "                                                                      11 11     110111101111                                      ";
	MenuMap[10][3] = "                                     11111                        11111111111111111111111 111  1    1                             ";
	MenuMap[10][4] = "                                    11111111111111111111111111111111111111111111111 1111111111111111111                           ";
	MenuMap[10][5] = "                                                      11111111111111111111111111111 11111111111111111111111                       ";
	MenuMap[10][6] = "                                                        111111111110011111111111111  111111111111111111111                        ";
	MenuMap[10][7] = "                                                        111111111111111111111111111111111111111111111111111                       ";
	MenuMap[10][8] = "                                           11111  111   111111111111111111111111111111111111111111111111111                       ";
	MenuMap[10][9] = "                                      11111111111  1111        11111111111111  11       11   11 11  11111  11                     ";
	MenuMap[10][10] = "                                     100000001111111111111111111111110000000            11    1  1  11                            ";
	MenuMap[10][11] = "                                       11100001111111111111111111111111100001           11   11  1  11        111                 ";
	MenuMap[10][12] = "                                        100000011111111111111111111111110000111111111111111111111111111111111111                  ";
	MenuMap[10][13] = "                                         11000000111111111111111111111110000110001110001110111011111111111110001                  ";
	MenuMap[10][14] = "                                           11000001100000001111111111111000010001111101111111111111111111111101                   ";
	MenuMap[10][15] = "                                             1111000000000000000000000000000000001111011111111111111110110011                     ";
	MenuMap[10][16] = "                                                 1111111111111111111111  1  000001110001110000011111111111                        ";
	MenuMap[10][17] = "                                                                            11111111111                                           ";

	MenuMap[11][0] = "                                                      1111111111                                                                  ";
	MenuMap[11][1] = "                                                         1000001     1111111111                                                   ";
	MenuMap[11][2] = "                                                          11 11     110111101111                                                  ";
	MenuMap[11][3] = "                         11111                        11111111111111111111111 111  1    1                                         ";
	MenuMap[11][4] = "                        11111111111111111111111111111111111111111111111 1111111111111111111                                       ";
	MenuMap[11][5] = "                                          11111111111111111111111111111 11111111111111111111111                                   ";
	MenuMap[11][6] = "                                            111111111110011111111111111  111111111111111111111                                    ";
	MenuMap[11][7] = "                                            111111111111111111111111111111111111111111111111111                                   ";
	MenuMap[11][8] = "                               11111  111   111111111111111111111111111111111111111111111111111                                   ";
	MenuMap[11][9] = "                          11111111111  1111        11111111111111  11       11   11 11  11111  11                                 ";
	MenuMap[11][10] = "                         100000001111111111111111111111110000000            11    1  1  11                                        ";
	MenuMap[11][11] = "                           11100001111111111111111111111111100001           11   11  1  11        111                             ";
	MenuMap[11][12] = "                            100000011111111111111111111111110000111111111111111111111111111111111111                              ";
	MenuMap[11][13] = "                             11000000111111111111111111111110000110001110001110111011111111111110001                              ";
	MenuMap[11][14] = "                               11000001100000001111111111111000010001111101111111111111111111111101                               ";
	MenuMap[11][15] = "                                 1111000000000000000000000000000000001111011111111111111110110011                                 ";
	MenuMap[11][16] = "                                     1111111111111111111111  1  000001110001110000011111111111                                    ";
	MenuMap[11][17] = "                                                                11111111111                                                       ";

	MenuMap[12][0] = "                                          1111111111                                                                              ";
	MenuMap[12][1] = "                                             1000001     1111111111                                                               ";
	MenuMap[12][2] = "                                              11 11     110111101111                                                              ";
	MenuMap[12][3] = "             11111                        11111111111111111111111 111  1    1                                                     ";
	MenuMap[12][4] = "            11111111111111111111111111111111111111111111111 1111111111111111111                                                   ";
	MenuMap[12][5] = "                              11111111111111111111111111111 11111111111111111111111                                               ";
	MenuMap[12][6] = "                                111111111110011111111111111  111111111111111111111                                                ";
	MenuMap[12][7] = "                                111111111111111111111111111111111111111111111111111                                               ";
	MenuMap[12][8] = "                   11111  111   111111111111111111111111111111111111111111111111111                                               ";
	MenuMap[12][9] = "              11111111111  1111        11111111111111  11       11   11 11  11111  11                                             ";
	MenuMap[12][10] = "             100000001111111111111111111111110000000            11    1  1  11                                                    ";
	MenuMap[12][11] = "               11100001111111111111111111111111100001           11   11  1  11        111                                         ";
	MenuMap[12][12] = "                100000011111111111111111111111110000111111111111111111111111111111111111                                          ";
	MenuMap[12][13] = "                 11000000111111111111111111111110000110001110001110111011111111111110001                                          ";
	MenuMap[12][14] = "                   11000001100000001111111111111000010001111101111111111111111111111101                                           ";
	MenuMap[12][15] = "                     1111000000000000000000000000000000001111011111111111111110110011                                             ";
	MenuMap[12][16] = "                         1111111111111111111111  1  000001110001110000011111111111                                                ";
	MenuMap[12][17] = "                                                    11111111111                                                                   ";

	MenuMap[13][0] = "                           1111111111                                                                                             ";
	MenuMap[13][1] = "                              1000001     1111111111                                                                              ";
	MenuMap[13][2] = "                               11 11     110111101111                                                                             ";
	MenuMap[13][3] = "111                        11111111111111111111111 111  1    1                                                                    ";
	MenuMap[13][4] = "11111111111111111111111111111111111111111111 1111111111111111111                                                                  ";
	MenuMap[13][5] = "               11111111111111111111111111111 11111111111111111111111                                                              ";
	MenuMap[13][6] = "                 111111111110011111111111111  111111111111111111111                                                               ";
	MenuMap[13][7] = "                 111111111111111111111111111111111111111111111111111                                                              ";
	MenuMap[13][8] = "    11111  111   111111111111111111111111111111111111111111111111111                                                              ";
	MenuMap[13][9] = "1111111111  1111        11111111111111  11       11   11 11  11111  11                                                            ";
	MenuMap[13][10] = "0000001111111111111111111111110000000            11    1  1  11                                                                   ";
	MenuMap[13][11] = "11100001111111111111111111111111100001           11   11  1  11        111                                                        ";
	MenuMap[13][12] = " 100000011111111111111111111111110000111111111111111111111111111111111111                                                         ";
	MenuMap[13][13] = "  11000000111111111111111111111110000110001110001110111011111111111110001                                                         ";
	MenuMap[13][14] = "    11000001100000001111111111111000010001111101111111111111111111111101                                                          ";
	MenuMap[13][15] = "      1111000000000000000000000000000000001111011111111111111110110011                                                            ";
	MenuMap[13][16] = "          1111111111111111111111  1  000001110001110000011111111111                                                               ";
	MenuMap[13][17] = "                                     11111111111                                                                                  ";

	MenuMap[14][0] = "                   1111111111                                                                                                     ";
	MenuMap[14][1] = "                      1000001     1111111111                                                                                      ";
	MenuMap[14][2] = "                       11 11     110111101111                                                                                     ";
	MenuMap[14][3] = "                   11111111111111111111111 111  1    1                                                                            ";
	MenuMap[14][4] = "111111111111111111111111111111111111 1111111111111111111                                                                          ";
	MenuMap[14][5] = "       11111111111111111111111111111 11111111111111111111111                                                                      ";
	MenuMap[14][6] = "         111111111110011111111111111  111111111111111111111                                                                       ";
	MenuMap[14][7] = "         111111111111111111111111111111111111111111111111111                                                                      ";
	MenuMap[14][8] = "1  111   111111111111111111111111111111111111111111111111111                                                                      ";
	MenuMap[14][9] = "11  1111        11111111111111  11       11   11 11  11111  11                                                                    ";
	MenuMap[14][10] = "11111111111111111111110000000            11    1  1  11                                                                           ";
	MenuMap[14][11] = "111111111111111111111111100001           11   11  1  11        111                                                                ";
	MenuMap[14][12] = "11111111111111111111111110000111111111111111111111111111111111111                                                                 ";
	MenuMap[14][13] = "00111111111111111111111110000110001110001110111011111111111110001                                                                 ";
	MenuMap[14][14] = "0001100000001111111111111000010001111101111111111111111111111101                                                                  ";
	MenuMap[14][15] = "11000000000000000000000000000000001111011111111111111110110011                                                                    ";
	MenuMap[14][16] = "  1111111111111111111111  1  000001110001110000011111111111                                                                       ";
	MenuMap[14][17] = "                             11111111111                                                                                          ";

	MenuMap[15][0] = "           1111111111                                                                                                             ";
	MenuMap[15][1] = "              1000001     1111111111                                                                                              ";
	MenuMap[15][2] = "               11 11     110111101111                                                                                             ";
	MenuMap[15][3] = "           11111111111111111111111 111  1    1                                                                                    ";
	MenuMap[15][4] = "1111111111111111111111111111 1111111111111111111                                                                                  ";
	MenuMap[15][5] = "1111111111111111111111111111 11111111111111111111111                                                                              ";
	MenuMap[15][6] = " 111111111110011111111111111  111111111111111111111                                                                               ";
	MenuMap[15][7] = " 111111111111111111111111111111111111111111111111111                                                                              ";
	MenuMap[15][8] = " 111111111111111111111111111111111111111111111111111                                                                              ";
	MenuMap[15][9] = "        11111111111111  11       11   11 11  11111  11                                                                            ";
	MenuMap[15][10] = "111111111111110000000            11    1  1  11                                                                                  1";
	MenuMap[15][11] = "1111111111111111100001           11   11  1  11        111                                                                     111";
	MenuMap[15][12] = "111111111111111110000111111111111111111111111111111111111                                                                   111111";
	MenuMap[15][13] = "111111111111111110000110001110001110111011111111111110001                                                                   111100";
	MenuMap[15][14] = "00001111111111111000010001111101111111111111111111111101                                                                  11110001";
	MenuMap[15][15] = "000000000000000000000000001111011111111111111110110011                                                                     1110010";
	MenuMap[15][16] = "1111111111111111  1  000001110001110000011111111111                                                                          11000";
	MenuMap[15][17] = "                     11111111111                                                                                                10";

	MenuMap[16][0] = "   1111111111                                                                                                                     ";
	MenuMap[16][1] = "      1000001     1111111111                                                                                                      ";
	MenuMap[16][2] = "       11 11     110111101111                                                                                                     ";
	MenuMap[16][3] = "   11111111111111111111111 111  1    1                                                                                            ";
	MenuMap[16][4] = "11111111111111111111 1111111111111111111                                                                                          ";
	MenuMap[16][5] = "11111111111111111111 11111111111111111111111                                                                                      ";
	MenuMap[16][6] = "11110011111111111111  111111111111111111111                                                                                       ";
	MenuMap[16][7] = "11111111111111111111111111111111111111111111                                                                                      ";
	MenuMap[16][8] = "11111111111111111111111111111111111111111111                                                                                      ";
	MenuMap[16][9] = "11111111111111  11       11   11 11  11111  11                                                                            0       ";
	MenuMap[16][10] = "1111110000000            11    1  1  11                                                                                  1        ";
	MenuMap[16][11] = "11111111100001           11   11  1  11        111                                                                     11111111111";
	MenuMap[16][12] = "1111111110000111111111111111111111111111111111111                                                                   11111111111111";
	MenuMap[16][13] = "1111111110000110001110001110111011111111111110001                                                                   11110000000111";
	MenuMap[16][14] = "111111111000010001111101111111111111111111111101                                                                  1111000111110001";
	MenuMap[16][15] = "0000000000000000001111011111111111111110110011                                                                     111001001001100";
	MenuMap[16][16] = "11111111  1  000001110001110000011111111111                                                                          1100000100110";
	MenuMap[16][17] = "             11111111111                                                                                                101000110 ";

	MenuMap[17][0] = "11111                                                                                                                             ";
	MenuMap[17][1] = "00001     1111111111                                                                                                              ";
	MenuMap[17][2] = "1 11     110111101111                                                                                                             ";
	MenuMap[17][3] = "111111111111111111 111  1    1                                                                                                    ";
	MenuMap[17][4] = "111111111111 1111111111111111111                                                                                                  ";
	MenuMap[17][5] = "111111111111 11111111111111111111111                                                                                              ";
	MenuMap[17][6] = "111111111111  111111111111111111111                                                                                               ";
	MenuMap[17][7] = "111111111111111111111111111111111111                                                                                              ";
	MenuMap[17][8] = "111111111111111111111111111111111111                                                                                              ";
	MenuMap[17][9] = "111111  11       11   11 11  11111  11                                                                            0            111";
	MenuMap[17][10] = "00000            11    1  1  11                                                                                  1          111174";
	MenuMap[17][11] = "100001           11   11  1  11        111                                                                     1111111111111111111";
	MenuMap[17][12] = "10000111111111111111111111111111111111111                                                                   1111111111111111011111";
	MenuMap[17][13] = "10000110001110001110111011111111111110001                                                                   1111000000011111011111";
	MenuMap[17][14] = "1000010001111101111111111111111111111101                                                                  111100011111000111011111";
	MenuMap[17][15] = "00000000001111011111111111111110110011                                                                     11100100100110011111111";
	MenuMap[17][16] = "  1  000001110001110000011111111111                                                                          110000010011000111111";
	MenuMap[17][17] = "     11111111111                                                                                                101000110         ";

	MenuMap[18][0] = "                                                                                                                                  ";
	MenuMap[18][1] = "  1111111111                                                                                                                      ";
	MenuMap[18][2] = " 110111101111                                                                                                                     ";
	MenuMap[18][3] = "1111111111 111  1    1                                                                                                            ";
	MenuMap[18][4] = "1111 1111111111111111111                                                                                                          ";
	MenuMap[18][5] = "1111 11111111111111111111111                                                                                                      ";
	MenuMap[18][6] = "1111  111111111111111111111                                                                                                      -";
	MenuMap[18][7] = "1111111111111111111111111111                                                                                                      ";
	MenuMap[18][8] = "1111111111111111111111111111                                                                                                      ";
	MenuMap[18][9] = "11       11   11 11  11111  11                                                                            0            1111111   1";
	MenuMap[18][10] = "         11    1  1  11                                                                                  1          11117411111111";
	MenuMap[18][11] = "         11   11  1  11        111                                                                     111111111111111111111111110";
	MenuMap[18][12] = "111111111111111111111111111111111                                                                   111111111111111101111111111110";
	MenuMap[18][13] = "001110001110111011111111111110001                                                                   111100000001111101111111111110";
	MenuMap[18][14] = "01111101111111111111111111111101                                                                  11110001111100011101111111111110";
	MenuMap[18][15] = "001111011111111111111110110011                                                                     1110010010011001111111111111110";
	MenuMap[18][16] = "001110001110000011111111111                                                                          11000001001100011111111111111";
	MenuMap[18][17] = "11111111                                                                                                101000110                 ";

	MenuMap[19][0] = "                                                                                                                                  ";
	MenuMap[19][1] = "  1111111111                                                                                                                      ";
	MenuMap[19][2] = " 110111101111                                                                                                                     ";
	MenuMap[19][3] = "1111111111 111  1    1                                                                                                            ";
	MenuMap[19][4] = "1111 1111111111111111111                                                                                                          ";
	MenuMap[19][5] = "1111 11111111111111111111111                                                                                                      ";
	MenuMap[19][6] = "1111  111111111111111111111                                                                                                      -";
	MenuMap[19][7] = "1111111111111111111111111111                                                                                                      ";
	MenuMap[19][8] = "1111111111111111111111111111                                                                                                      ";
	MenuMap[19][9] = "11       11   11 11  11111  11                                                                            0            1111111   1";
	MenuMap[19][10] = "         11    1  1  11                                                                                  1          11117411111111";
	MenuMap[19][11] = "         11   11  1  11        111                                                                     111111111111111111111111110";
	MenuMap[19][12] = "111111111111111111111111111111111                                                                   111111111111111101111111111110";
	MenuMap[19][13] = "001110001110111011111111111110001                                                                   111100000001111101111111111110";
	MenuMap[19][14] = "01111101111111111111111111111101                                                                  11110001111100011101111111111110";
	MenuMap[19][15] = "001111011111111111111110110011                                                                     1110010010011001111111111111110";
	MenuMap[19][16] = "001110001110000011111111111                                                                          11000001001100011111111111111";
	MenuMap[19][17] = "11111111                                                                                                101000110                 ";

	MenuMap[20][0] = "                                                                                                                                  ";
	MenuMap[20][1] = "1111                                                                                                                              ";
	MenuMap[20][2] = "01111                                                                                                                             ";
	MenuMap[20][3] = "11 111  1    1                                                                                                                    ";
	MenuMap[20][4] = "1111111111111111                                                                                                                  ";
	MenuMap[20][5] = "11111111111111111111                                                                                                              ";
	MenuMap[20][6] = "1111111111111111111                                                                                                      -----1111";
	MenuMap[20][7] = "11111111111111111111                                                                                                          1101";
	MenuMap[20][8] = "11111111111111111111                                                                                                      11111111";
	MenuMap[20][9] = " 11   11 11  11111  11                                                                            0            1111111   1111111  ";
	MenuMap[20][10] = " 11    1  1  11                                                                                  1          1111741111111111111111";
	MenuMap[20][11] = " 11   11  1  11        111                                                                     11111111111111111111111111011111111";
	MenuMap[20][12] = "1111111111111111111111111                                                                   11111111111111110111111111111011111111";
	MenuMap[20][13] = "1110111011111111111110001                                                                   11110000000111110111111111111011111111";
	MenuMap[20][14] = "111111111111111111111101                                                                  1111000111110001110111111111111011111111";
	MenuMap[20][15] = "1111111111111110110011                                                                     111001001001100111111111111111011111111";
	MenuMap[20][16] = "1110000011111111111                                                                          1100000100110001111111111111111111111";
	MenuMap[20][17] = "                                                                                                101000110                         ";

	MenuMap[21][0] = "                                                                                                                                  ";
	MenuMap[21][1] = "                                                                                                                                  ";
	MenuMap[21][2] = "                                                                                                                                  ";
	MenuMap[21][3] = "1    1                                                                                                                            ";
	MenuMap[21][4] = "11111111                                                                                                                          ";
	MenuMap[21][5] = "111111111111                                                                                                                      ";
	MenuMap[21][6] = "11111111111                                                                                                      -----111111111111";
	MenuMap[21][7] = "111111111111                                                                                                          110111111111";
	MenuMap[21][8] = "111111111111                                                                                                      1111111111111111";
	MenuMap[21][9] = " 11  11111  11                                                                            0            1111111   1111111  11111111";
	MenuMap[21][10] = "  1  11                                                                                  1          1111741111111111111111111111  ";
	MenuMap[21][11] = "  1  11        111                                                                     11111111111111111111111111011111111111111 1";
	MenuMap[21][12] = "11111111111111111                                                                   1111111111111111011111111111101111111111111111";
	MenuMap[21][13] = "11111111111110001                                                                   1111000000011111011111111111101111111111111111";
	MenuMap[21][14] = "1111111111111101                                                                  111100011111000111011111111111101111111111111001";
	MenuMap[21][15] = "11111110110011                                                                     11100100100110011111111111111101111111111100011";
	MenuMap[21][16] = "11111111111                                                                          110000010011000111111111111111111111111100011";
	MenuMap[21][17] = "                                                                                        101000110                             0011";

	MenuMap[22][0] = "                                                                                                                                  ";
	MenuMap[22][1] = "                                                                                                                                  ";
	MenuMap[22][2] = "                                                                                                                                  ";
	MenuMap[22][3] = "                                                                                                                                  ";
	MenuMap[22][4] = "                                                                                                                                  ";
	MenuMap[22][5] = "1111                                                                                                                              ";
	MenuMap[22][6] = "111                                                                                                      -----11111111111111      ";
	MenuMap[22][7] = "1111                                                                                                          1101111111111       ";
	MenuMap[22][8] = "1111                                                                                                      111111111111111111111111";
	MenuMap[22][9] = "11  11                                                                            0            1111111   1111111  111111111       ";
	MenuMap[22][10] = "                                                                                 1          1111741111111111111111111111  11111101";
	MenuMap[22][11] = "       111                                                                     11111111111111111111111111011111111111111 11    111";
	MenuMap[22][12] = "111111111                                                                   111111111111111101111111111110111111111111111111111111";
	MenuMap[22][13] = "111110001                                                                   111100000001111101111111111110111111111111111111100011";
	MenuMap[22][14] = "11111101                                                                  11110001111100011101111111111110111111111111100111111000";
	MenuMap[22][15] = "110011                                                                     1110010010011001111111111111110111111111110001110100110";
	MenuMap[22][16] = "111                                                                          11000001001100011111111111111111111111110001100000011";
	MenuMap[22][17] = "                                                                                101000110                             00110110001 ";

	MenuMap[23][0] = "                                                                                                                                  ";
	MenuMap[23][1] = "                                                                                                                                  ";
	MenuMap[23][2] = "                                                                                                                                  ";
	MenuMap[23][3] = "                                                                                                                                  ";
	MenuMap[23][4] = "                                                                                                                                  ";
	MenuMap[23][5] = "                                                                                                                             1    ";
	MenuMap[23][6] = "                                                                                                 -----11111111111111         1    ";
	MenuMap[23][7] = "                                                                                                      1101111111111          1    ";
	MenuMap[23][8] = "                                                                                                  1111111111111111111111111  1    ";
	MenuMap[23][9] = "                                                                          0            1111111   1111111  111111111      1   1    ";
	MenuMap[23][10] = "                                                                         1          1111741111111111111111111111  1111110111111111";
	MenuMap[23][11] = "11                                                                     11111111111111111111111111011111111111111 11    11111111111";
	MenuMap[23][12] = "1                                                                   11111111111111110111111111111011111111111111111111111111111000";
	MenuMap[23][13] = "1                                                                   11110000000111110111111111111011111111111111111110001111111000";
	MenuMap[23][14] = "                                                                  1111000111110001110111111111111011111111111110011111100011111111";
	MenuMap[23][15] = "                                                                   111001001001100111111111111111011111111111000111010011011111   ";
	MenuMap[23][16] = "                                                                     110000010011000111111111111111111111111100011000000111       ";
	MenuMap[23][17] = "                                                                        101000110                             00110110001         ";

	MenuMap[24][0] = "                                                                                                                                  ";
	MenuMap[24][1] = "                                                                                                                                  ";
	MenuMap[24][2] = "                                                                                                                                  ";
	MenuMap[24][3] = "                                                                                                                                  ";
	MenuMap[24][4] = "                                                                                                                                  ";
	MenuMap[24][5] = "                                                                                                           1                      ";
	MenuMap[24][6] = "                                                                               -----11111111111111         1                      ";
	MenuMap[24][7] = "                                                                                    1101111111111          1                      ";
	MenuMap[24][8] = "                                                                                1111111111111111111111111  1                      ";
	MenuMap[24][9] = "                                                        0            1111111   1111111  111111111      1   1                      ";
	MenuMap[24][10] = "                                                       1          1111741111111111111111111111  11111101111111111                 ";
	MenuMap[24][11] = "                                                     11111111111111111111111111011111111111111 11    111111111111                 ";
	MenuMap[24][12] = "                                                  111111111111111101111111111110111111111111111111111111111110000                 ";
	MenuMap[24][13] = "                                                  111100000001111101111111111110111111111111111111100011111110001                 ";
	MenuMap[24][14] = "                                                11110001111100011101111111111110111111111111100111111000111111111                 ";
	MenuMap[24][15] = "                                                 111001001001100111111111111111011111111111000111010011011111                     ";
	MenuMap[24][16] = "                                                   110000010011000111111111111111111111111100011000000111                         ";
	MenuMap[24][17] = "                                                      101000110                             00110110001                           ";

	MenuMap[25][0] = "                                                                                                                                  ";
	MenuMap[25][1] = "                                                                                                                                  ";
	MenuMap[25][2] = "                                                                                                                                  ";
	MenuMap[25][3] = "                                                                                                                                  ";
	MenuMap[25][4] = "                                                                                                                                  ";
	MenuMap[25][5] = "                                                                                        1                                         ";
	MenuMap[25][6] = "                                                            -----11111111111111         1                                         ";
	MenuMap[25][7] = "                                                                 1101111111111          1                                         ";
	MenuMap[25][8] = "                                                             1111111111111111111111111  1                                         ";
	MenuMap[25][9] = "                                     0            1111111   1111111  111111111      1   1                                         ";
	MenuMap[25][10] = "                                    1          1111741111111111111111111111  11111101111111111                                    ";
	MenuMap[25][11] = "                                  11111111111111111111111111011111111111111 11    111111111111                                    ";
	MenuMap[25][12] = "                               1111111111111111011111111111101111111111111111111111111111100001                                   ";
	MenuMap[25][13] = "                               111100000001111101111111111110111111111111111111100011111110001                                    ";
	MenuMap[25][14] = "                             11110001111100011101111111111110111111111111100111111000111111111                                    ";
	MenuMap[25][15] = "                              111001001001100111111111111111011111111111000111010011011111                                        ";
	MenuMap[25][16] = "                                110000010011000111111111111111111111111100011000000111                                            ";
	MenuMap[25][17] = "                                   101000110                             00110110001                                              ";

	MenuMap[26][0] = "                                                                                                                                  ";
	MenuMap[26][1] = "                                                                                                                                  ";
	MenuMap[26][2] = "                                                                                                                                  ";
	MenuMap[26][3] = "                                                                                                                                  ";
	MenuMap[26][4] = "                                                                                                                                  ";
	MenuMap[26][5] = "                                                                             1                                                    ";
	MenuMap[26][6] = "                                                 -----11111111111111         1                                                    ";
	MenuMap[26][7] = "                                                      1101111111111          1                                                    ";
	MenuMap[26][8] = "                                                  1111111111111111111111111  1                                                    ";
	MenuMap[26][9] = "                          0            1111111   1111111  111111111      1   1                                                    ";
	MenuMap[26][10] = "                         1          1111741111111111111111111111  11111101111111111                                               ";
	MenuMap[26][11] = "                       11111111111111111111111111011111111111111 11    111111111111                                               ";
	MenuMap[26][12] = "                    1111111111111111011111111111101111111111111111111111111111100001                                              ";
	MenuMap[26][13] = "                    111100000001111101111111111110111111111111111111100011111110001                                               ";
	MenuMap[26][14] = "                  11110001111100011101111111111110111111111111100111111000111111111                                               ";
	MenuMap[26][15] = "                   111001001001100111111111111111011111111111000111010011011111                                                   ";
	MenuMap[26][16] = "                     110000010011000111111111111111111111111100011000000111                                                       ";
	MenuMap[26][17] = "                        101000110                             00110110001                                                         ";

	MenuMap[27][0] = "                                                                                                                                  ";
	MenuMap[27][1] = "                                                                                                                                  ";
	MenuMap[27][2] = "                                                                                                                                  ";
	MenuMap[27][3] = "                                                                                                                                  ";
	MenuMap[27][4] = "                                                                                                                                  ";
	MenuMap[27][5] = "                                                     1                                                                            ";
	MenuMap[27][6] = "                         -----11111111111111         1                                                                            ";
	MenuMap[27][7] = "                              1101111111111          1                                                                            ";
	MenuMap[27][8] = "                          1111111111111111111111111  1                                                                            ";
	MenuMap[27][9] = "  0            1111111   1111111  111111111      1   1                                                                            ";
	MenuMap[27][10] = " 1          1111741111111111111111111111  11111101111111111                                                                       ";
	MenuMap[27][11] = "1111111111111111111111111011111111111111 11    111111111111                                                                       ";
	MenuMap[27][12] = "111111111111011111111111101111111111111111111111111111100001                                                                      ";
	MenuMap[27][13] = "00000001111101111111111110111111111111111111100011111110001                                                                       ";
	MenuMap[27][14] = "01111100011101111111111110111111111111100111111000111111111                                                                       ";
	MenuMap[27][15] = "1001001100111111111111111011111111111000111010011011111                                                                           ";
	MenuMap[27][16] = "000010011000111111111111111111111111100011000000111                                                                               ";
	MenuMap[27][17] = "101000110                             00110110001                                                                                 ";

	MenuMap[28][0] = "                                                                                                                                  ";
	MenuMap[28][1] = "                                                                                                                                  ";
	MenuMap[28][2] = "                                                                                                                                  ";
	MenuMap[28][3] = "                                                                                                                                  ";
	MenuMap[28][4] = "                                                                                                                                  ";
	MenuMap[28][5] = "                                             1                                                                                    ";
	MenuMap[28][6] = "                 -----11111111111111         1                                                                                    ";
	MenuMap[28][7] = "                      1101111111111          1                                                                                    ";
	MenuMap[28][8] = "                  1111111111111111111111111  1                                                                                    ";
	MenuMap[28][9] = "       1111111   1111111  111111111      1   1                                                                                    ";
	MenuMap[28][10] = "    1111741111111111111111111111  11111101111111111                                                                               ";
	MenuMap[28][11] = "11111111111111111011111111111111 11    111111111111                                                                               ";
	MenuMap[28][12] = "1111011111111111101111111111111111111111111111100001                                                                              ";
	MenuMap[28][13] = "111101111111111110111111111111111111100011111110001                                                                               ";
	MenuMap[28][14] = "011101111111111110111111111111100111111000111111111                                                                               ";
	MenuMap[28][15] = "00111111111111111011111111111000111010011011111                                                                                   ";
	MenuMap[28][16] = "1000111111111111111111111111100011000000111                                                                                       ";
	MenuMap[28][17] = "0                             00110110001                                                                                         ";

	MenuMap[29][0] = "                                                                                                                                  ";
	MenuMap[29][1] = "                                                                                                                                  ";
	MenuMap[29][2] = "                                                                                                                                  ";
	MenuMap[29][3] = "                                                                                                                                  ";
	MenuMap[29][4] = "                                                                                                                                  ";
	MenuMap[29][5] = "                                     1                                                                                            ";
	MenuMap[29][6] = "         -----11111111111111         1                                                                                            ";
	MenuMap[29][7] = "              1101111111111          1                                                                                            ";
	MenuMap[29][8] = "          1111111111111111111111111  1                                                                                            ";
	MenuMap[29][9] = "111111   1111111  111111111      1   1                                                                                            ";
	MenuMap[29][10] = "741111111111111111111111  11111101111111111                                                                                       ";
	MenuMap[29][11] = "111111111011111111111111 11    111111111111                                                                                       ";
	MenuMap[29][12] = "11111111101111111111111111111111111111100001                                                                                      ";
	MenuMap[29][13] = "1111111110111111111111111111100011111110001                                                                                       ";
	MenuMap[29][14] = "1111111110111111111111100111111000111111111                                                                                       ";
	MenuMap[29][15] = "111111111011111111111000111010011011111                                                                                           ";
	MenuMap[29][16] = "11111111111111111111100011000000111                                                                                               ";
	MenuMap[29][17] = "                      00110110001                                                                                                 ";

	MenuMap[30][0] = "                                                                                                                                  ";
	MenuMap[30][1] = "                                                                                                                                  ";
	MenuMap[30][2] = "                                                                                                                                  ";
	MenuMap[30][3] = "                                                                                                                                  ";
	MenuMap[30][4] = "                                                                                                                                  ";
	MenuMap[30][5] = "                             1                                                                                                    ";
	MenuMap[30][6] = " -----11111111111111         1                                                                                                    ";
	MenuMap[30][7] = "      1101111111111          1                                                                                                    ";
	MenuMap[30][8] = "  1111111111111111111111111  1                                                                                                    ";
	MenuMap[30][9] = " 1111111  111111111      1   1                                                                                                    ";
	MenuMap[30][10] = "1111111111111111  11111101111111111                                                                                               ";
	MenuMap[30][11] = "1011111111111111 11    111111111111                                                                                               ";
	MenuMap[30][12] = "101111111111111111111111111111100001                                                                                              ";
	MenuMap[30][13] = "10111111111111111111100011111110001                                                                                               ";
	MenuMap[30][14] = "10111111111111100111111000111111111                                                                                               ";
	MenuMap[30][15] = "1011111111111000111010011011111                                                                                                   ";
	MenuMap[30][16] = "111111111111100011000000111                                                                                                       ";
	MenuMap[30][17] = "              00110110001                                                                                                         ";

	MenuMap[31][0] = "                                                                                                                                  ";
	MenuMap[31][1] = "                                                                                                                                  ";
	MenuMap[31][2] = "                                                                                                                                  ";
	MenuMap[31][3] = "                                                                                                                                  ";
	MenuMap[31][4] = "                                                                                                                                  ";
	MenuMap[31][5] = "                     1                                                                                                            ";
	MenuMap[31][6] = "111111111111         1                                                                                                            ";
	MenuMap[31][7] = "01111111111          1                                                                                                            ";
	MenuMap[31][8] = "1111111111111111111  1                                                                                                            ";
	MenuMap[31][9] = "  111111111      1   1                                                                                                            ";
	MenuMap[31][10] = "11111111  11111101111111111                                                                                                       ";
	MenuMap[31][11] = "11111111 11    111111111111                                                                                                       ";
	MenuMap[31][12] = "1111111111111111111111100001                                                                                                      ";
	MenuMap[31][13] = "111111111111100011111110001                                                                                                       ";
	MenuMap[31][14] = "111111100111111000111111111                                                                                                       ";
	MenuMap[31][15] = "11111000111010011011111                                                                                                           ";
	MenuMap[31][16] = "1111100011000000111                                                                                                               ";
	MenuMap[31][17] = "      00110110001                                                                                                                 ";

	MenuMap[32][0] = "                                                                                                                                  ";
	MenuMap[32][1] = "                                                                                                                                  ";
	MenuMap[32][2] = "                                                                                                                                  ";
	MenuMap[32][3] = "                                                                                                                                  ";
	MenuMap[32][4] = "                                                                                                                                  ";
	MenuMap[32][5] = "             1                                                                                                                    ";
	MenuMap[32][6] = "1111         1                                                                                                                    ";
	MenuMap[32][7] = "111          1                                                                                                                    ";
	MenuMap[32][8] = "11111111111  1                                                                                                                    ";
	MenuMap[32][9] = "111      1   1                                                                                                                    ";
	MenuMap[32][10] = "  11111101111111111                                                                                                               ";
	MenuMap[32][11] = " 11    111111111111                                                                                                               ";
	MenuMap[32][12] = "11111111111111100001                                                                                                              ";
	MenuMap[32][13] = "1111100011111110001                                                                                                               ";
	MenuMap[32][14] = "0111111000111111111                                                                                                               ";
	MenuMap[32][15] = "111010011011111                                                                                                                   ";
	MenuMap[32][16] = "11000000111                                                                                                                       ";
	MenuMap[32][17] = "110110001                                                                                                                         ";

	MenuMap[33][0] = "                                                                                                                                  ";
	MenuMap[33][1] = "                                                                                                                                  ";
	MenuMap[33][2] = "                                                                                                                                  ";
	MenuMap[33][3] = "                                                                                                                                  ";
	MenuMap[33][4] = "                                                                                                                                  ";
	MenuMap[33][5] = "     1                                                                                                                            ";
	MenuMap[33][6] = "     1                                                                                                                            ";
	MenuMap[33][7] = "     1                                                                                                                            ";
	MenuMap[33][8] = "111  1                                                                                                                            ";
	MenuMap[33][9] = " 1   1                                                                                                                            ";
	MenuMap[33][10] = "01111111111                                                                                                                       ";
	MenuMap[33][11] = "11111111111                                                                                                                       ";
	MenuMap[33][12] = "111111100001                                                                                                                      ";
	MenuMap[33][13] = "11111110001                                                                                                                       ";
	MenuMap[33][14] = "00111111111                                                                                                                       ";
	MenuMap[33][15] = "1011111                                                                                                                           ";
	MenuMap[33][16] = "111                                                                                                                               ";
	MenuMap[33][17] = "1                                                                                                                                 ";

	MenuMap[34][0] = "                                                                                                                                  ";
	MenuMap[34][1] = "                                                                                                                                  ";
	MenuMap[34][2] = "                                                                                                                                  ";
	MenuMap[34][3] = "                                                                                                                                  ";
	MenuMap[34][4] = "                                                                                                                                  ";
	MenuMap[34][5] = "                                                                                                                                  ";
	MenuMap[34][6] = "                                                                                                                                  ";
	MenuMap[34][7] = "                                                                                                                                  ";
	MenuMap[34][8] = "                                                                                                                                  ";
	MenuMap[34][9] = "                                                                                                                                  ";
	MenuMap[34][10] = "111                                                                                                                               ";
	MenuMap[34][11] = "111                                                                                                                               ";
	MenuMap[34][12] = "0001                                                                                                                              ";
	MenuMap[34][13] = "001                                                                                                                               ";
	MenuMap[34][14] = "111                                                                                                                               ";
	MenuMap[34][15] = "                                                                                                                                  ";
	MenuMap[34][16] = "                                                                                                                                  ";
	MenuMap[34][17] = "                                                                                                                                  ";



}
void MenuProgress()
{
	int LogoPage = 0;
	int next = 0;
	int menuNum = 1;
	MenuInitialize();
	while (true)
	{
		if (deltatime + MenuDelay <= GetTickCount64())
		{
			deltatime = GetTickCount64();
			if (menuNum == 1 && GetAsyncKeyState(VK_RIGHT)) { menuNum = 2; }
			if (menuNum == 2 && GetAsyncKeyState(VK_LEFT)) { menuNum = 1; }
			if (menuNum == 1 && GetAsyncKeyState(VK_RETURN)) { menu = GAME; break; }
			if (menuNum == 2 && GetAsyncKeyState(VK_RETURN)) { menu = EXIT; break; }
			MenuRender(menuNum, LogoPage);
			FlipBuffer();
			ClearBuffer();
		}
	}
	MenuRelease();
}
void MenuRender(int Num, int& LogoPage)
{
	if (Num == 1)
	{
		WriteBuffer(19, 40, "→[시작]", RED);
		WriteBuffer(40, 40, "[종료]", WHITE);
	}
	if (Num == 2)
	{
		WriteBuffer(20, 40, "[시작]", WHITE);
		WriteBuffer(39, 40, "→[종료]", RED);
	}
	for (int i = 0; i < 6; i++)
	{
		WriteBuffer(1, 5 + i, MenuTitle[i], WHITE);
	}
	for (int i = 0; i < MenuSize; i++)
	{
		WriteBuffer(0, 15 + i, MenuMap[LogoPage][i], WHITE);
		if (LogoPage >= 34) { LogoPage = 0; }
	}
	LogoPage++;

}
void MenuRelease()
{
	for (int i = 0; i < MenuTitleSize; i++)
	{
		MenuTitle[i] = nullptr;
	}
}
#pragma endregion

void RespawnInit(int(*Map)[MapX])
{
	if (playerDie && savePlayer != nullptr)
	{
		player->hp = savePlayer->hp;
		for (int i = 0; i < 3; i++)
		{
			player->bulletNum[i] = savePlayer->bulletnum[i];
		}

		pat->x = player->x - 4;
		
		playerDie = false;
	}
}
void SaveMap(int(*Map)[MapX])
{
	if (player->hp> 0)
	{
		for (int y = 0; y < MapY; y++)
		{
			for (int x = 0; x < MapX; x++)
			{
				saveMap[y][x] = Map[y][x];
			}
		}
	}
	
}
void loadMap(int(*Map)[MapX])
{
	for (int y = 0; y < MapY; y++)
	{
		for (int x = 0; x < MapX; x++)
		{
			Map[y][x] = saveMap[y][x];
		}
	}
}
void SavePoint(int(*Map)[MapX])
{
	savePlayer = (SavePlayer*)malloc(sizeof(SavePlayer));
	MapPos = 0;
	for (int i = 0; i < 3; i++)
	{
		savePlayer->bulletnum[i] = player->bulletNum[i];
	}
	savePlayer->hp = player->hp;

}
void DieUI_init()
{
	DieUI[0] = "Y88b   d88P                     8888888b.  d8b         ";
	DieUI[1] = " Y88b d88P                      888   Y88b Y8P         ";
	DieUI[2] = "  Y88o88P                       888    888                 ";
	DieUI[3] = "   Y888P  .d88b.  888  888      888    888 888.  d88b.";
	DieUI[4] = "	888  d88""88b 888  888      888    888 888 d8P  Y8b";
	DieUI[5] = "	888  888  888 888  888      888    888 888 88888888";
	DieUI[6] = "	888  Y88..88P Y88b 888      888  .d88P 888 Y8b.";
	DieUI[7] = "    888    Y88P     Y88888      8888888P   888   Y8888 ";

}
void WinUI_init()
{
	WinUI[0] = "db    db  .d88b.  db    db      db   d8b   db d888888b d8b   db ";
	WinUI[1] = "`8b  d8' .8P  Y8. 88    88      88   I8I   88   `88'   888o  88 ";
	WinUI[2] = " `8bd8'  88    88 88    88      88   I8I   88    88    88V8o 88 ";
	WinUI[3] = "   88    88    88 88    88      Y8   I8I   88    88    88 V8o88 ";
	WinUI[4] = "   88    `8b  d8' 88b  d88      `8b d8'8b d8'   .88.   88  V888 ";
	WinUI[5] = "   YP     `Y88P'  ~Y8888P'       `8b8' `8d8'  Y888888P VP   V8P ";
	WinUI[6] = "";
	WinUI[7] = "";
}
int DieProgress()
{
	int num = 0;
	RetryCount--;
	char* a = (char*)malloc(sizeof(char));
	_itoa(RetryCount, a, 10);

	while (true)
	{

		int DieInfoTime_End = 0;
		for (int i = 0; i < 8; i++)
		{
			WriteBuffer(10, 10 + i, DieUI[i], RED);
		}

		WriteBuffer(20, 20, "Press Enter", RED);
		WriteBuffer(18, 22, "도전 가능횟수: ", RED);
		WriteBuffer(25, 22, a, RED);
		if (RetryCount <= 0)
		{
			menu = LOGO;
			stage = STAGE1;
			WriteBuffer(10, 20, "도전실패 로고화면으로 돌아갑니다..", RED);
		}
		if (GetAsyncKeyState(VK_RETURN))
		{

			return 1;
		}
		FlipBuffer();
		ClearBuffer();
		Sleep(StageDelay);
	}
	free(a);
	a = nullptr;
}

#pragma region Stages
void Stage_progress()
{
	
	while (true) {

		switch (stage)
		{
		case STAGE1:
			Stage1();
			break;
		case STAGE2:
			Stage2();
			break;
		case STAGE3:
			Stage3();
			break;
		case STAGE4:
			Stage4();
			break;
		case STAGE_Boss1:
			Boss1();
			break;
		default:
			break;
		}
		if (menu != GAME) { break; }
	}
	
}

void Stage1()
{
	PlayerInit(5, 27);
	PatInit();
	RespawnInit(pMap1);
	SaveMap(pMap1);
	SavePoint(pMap1);
	EnemyInit(pMap1);
	TrapInit(pMap1);

	countTime = 0;
	RandomBuff_Init(268, 25);
	while (true)
	{
		if (deltatime + StageDelay <= GetTickCount64())
		{
			deltatime = GetTickCount64();

			ProgressStage(pMap1);
			RenderStage(pMap1);
			StageUI_Rander(1);

			FlipBuffer();
			ClearBuffer();
			if (player->x >= MapX - 3)
			{
				stage = STAGE2;
				MapPos = 0;
				free(savePlayer);
				savePlayer = nullptr;
				break;
			}
			if (PlayerDieProgress()) { break; }
		}
	}
	ClearStage();
	loadMap(pMap1);
}
	
void Stage2()
{
	PlayerReplace(2, 27);
	RandomBuff_Init(268, 25);
	InitStage(pMap2);

	while (true)
	{
		if (deltatime + StageDelay <= GetTickCount64())
		{
			deltatime = GetTickCount64();

			ProgressStage(pMap2);
			RenderStage(pMap2);
			RandomEnemySpone(1);
			StageUI_Rander(2);

			FlipBuffer();
			ClearBuffer();
			if (player->x >= MapX - 3)
			{
				stage = STAGE3;
				MapPos = 0;
				break;
			}
			if (PlayerDieProgress()) { break; }
		}
	}
	ClearStage();
	loadMap(pMap2);
}

void Stage3()
{
	PlayerReplace(2, 27);
	InitStage(pMap3);
	RandomBuff_Init(268, 25);

	while (true)
	{
		if (deltatime + StageDelay <= GetTickCount64())
		{
			deltatime = GetTickCount64();

			ProgressStage(pMap3);
			RenderStage(pMap3);
			RandomEnemySpone(1);
			StageUI_Rander(3);

			FlipBuffer();
			ClearBuffer();
			if (player->x >= MapX - 3)
			{
				stage = STAGE4;
				MapPos = 0;
				break;
			}
			if (PlayerDieProgress()) { break; }
		}
	}
	ClearStage();
	loadMap(pMap3);
}

void Stage4()
{
	PlayerReplace(2, 27);
	InitStage(pMap4);
	RandomBuff_Init(268, 25);

	while (true)
	{
		if (deltatime + StageDelay <= GetTickCount64())
		{
			deltatime = GetTickCount64();

			ProgressStage(pMap4);
			RenderStage(pMap4);
			RandomEnemySpone(2);
			StageUI_Rander(4);

			FlipBuffer();
			ClearBuffer();
			if (player->x >= MapX - 3)
			{
				stage = STAGE_Boss1;
				MapPos = 0;
				break;
			}
			if (PlayerDieProgress()) { break; }
		}
	}
	ClearStage();
	loadMap(pMap4);
}

void Boss1()
{

	InitStage(pBoss1);
	Boss1_Init(268, 19);
	PlayerReplace(2, 27);

	while (true)
	{
		if (deltatime + StageDelay <= GetTickCount64())
		{
			deltatime = GetTickCount64();

			ProgressStage(pBoss1);
			RenderStage(pBoss1);
			Boss1_Rander();
			Boss1_progress();
			RandomEnemySpone(2);
			StageUI_Rander(5);
			DroneRandomSpone();
			DroneRender();
			DroneProgress();
			BossBulletRender();
			PlayerAttackBoss();
			BossBulletProgress();

			FlipBuffer();
			ClearBuffer();
			if (boss->hp <= 0)
			{
				while (true)
				{
					for (int i = 0; i < 8; i++)
					{
						WriteBuffer(10, 20 + i, WinUI[i], WHITE);
					}
					if (GetAsyncKeyState(VK_BACK))
					{
						break;
					}
					FlipBuffer();
					ClearBuffer();
					Sleep(StageDelay);
				}
				WriteBuffer(10, 20, "미션 클리어!!! ", WHITE);
				menu = LOGO;
				stage = STAGE1;
				break;
			}
			if (PlayerDieProgress()) { break; }
			Sleep(StageDelay);
		}
	}
	ClearStage();
	loadMap(pBoss1);
}
#pragma endregion




#pragma region Stage
void InitStage(int(*Map)[MapX]) {
	RespawnInit(Map);
	SaveMap(Map);
	SavePoint(Map);
	EnemyInit(Map);
	TrapInit(Map);
	pat->x = player->x;
	countTime = 0;
}
void RenderStage(int(*Map)[MapX]) {
	ItemProRander();
	MapRender(Map);
	TrapRander();
	PlayerRender();
	GunUI_Rander();
	EnemyRander();
	ShowKeyInfo();
	RandomBuff_Rander();
}
void ProgressStage(int(*Map)[MapX]) {
	countTime++;
	PatPorogress(Map);
	PlayerProgress(Map);
	PlayerBulletProgress(Map);
	EnemyHpDownEffect();
	EnemyPorogress(Map);
	EnemyBulletProgress(Map);
	PlayerHpDownEffect();
	BombProgress(Map);
	PlayerKnifeAttack();
	MapItemInit(Map);
	LeftScreen();
	RandomBuff_Progress();
	
}
void ClearStage() {
	for (int i = 0; i < enemyBulletCount; i++)
	{
		if (enemyBullet[i] != nullptr)
		{
			free(enemyBullet[i]);
			enemyBullet[i] = nullptr;
		}
	}
	for (int i = 0; i < enemyCount; i++)
	{
		if (enemy[i] != nullptr)
		{
			free(enemy[i]);
			enemy[i] = nullptr;
		}
	}
	for (int i = 0; i < playerBulletCount; i++)
	{
		if (playerBullet[i] != nullptr)
		{
			free(playerBullet[i]);
			playerBullet[i] = nullptr;
		}
	}
	for (int i = 0; i < TrapCount; i++)
	{
		if (trap[i] != nullptr)
		{
			free(trap[i]);
			trap[i] = nullptr;
		}
	}
	for (int i = 0; i < ItemCount; i++)
	{
		if (item[i] != nullptr)
		{
			free(item[i]);
			item[i] = nullptr;
		}
	}
	for (int i = 0; i < patBulletCount; i++) {
		if (patBullet[i] != nullptr) {
			free(patBullet[i]);
			patBullet[i] = nullptr;
		}
	}
	
}
#pragma endregion


#pragma region Player
void PlayerInit(int x, int y)
{
	player = (Player*)malloc(sizeof(Player));
	player->x = x;
	player->y = y;
	player->hp = 10;
	player->MaxHp = 10;
	player->color = WHITE;

	//착용중인 무기번호
	player->weaponNum = PISTOL;

	//총알 기본개수
	player->bulletNum[RIFLE] = 100;
	player->bulletNum[BOMB] = 10;

	player->isJump = false;
	player->isfloat = false;
	player->direction = RIGHT;
	player->pistolDamage = 1;

	//발사 지연시간
	player->bulletDelay[PISTOL][MAX_TIME] = 5;
	player->bulletDelay[PISTOL][NOW_TIME] = 0;

	player->bulletDelay[RIFLE][MAX_TIME] = 2;
	player->bulletDelay[RIFLE][NOW_TIME] = 0;

	player->bulletDelay[BOMB][MAX_TIME] = 20;
	player->bulletDelay[BOMB][NOW_TIME] = 0;

	//Hp
	player->isDownHp = false;
	player->downHpDelay[MAX_TIME] = 5;
	player->downHpDelay[NOW_TIME] = 0;

	//방향
	player->moveDriction = STAND;
	player->h = player->y;
#pragma region SHAPE
	player->shape[RIGHT][0] = "  O";
	player->shape[RIGHT][1] = " (|o";
	player->shape[RIGHT][2] = "  ^";
	player->shape[RIGHT][3] = " - -";

	player->shape[R_UP][0] = "  Oo";
	player->shape[R_UP][1] = " (|┘";
	player->shape[R_UP][2] = "  ^ ";
	player->shape[R_UP][3] = " - -";

	player->shape[UP][0] = " oOo";
	player->shape[UP][1] = " (|)";
	player->shape[UP][2] = "  ^ ";
	player->shape[UP][3] = " - -";

	player->shape[L_UP][0] = " oO";
	player->shape[L_UP][1] = "  |)";
	player->shape[L_UP][2] = "  ^";
	player->shape[L_UP][3] = " - -";

	player->shape[LEFT][0] = "  O ";
	player->shape[LEFT][1] = " o|)";
	player->shape[LEFT][2] = "  ^ ";
	player->shape[LEFT][3] = " - -";

	player->shape[L_DOWN][0] = "  O";
	player->shape[L_DOWN][1] = " o|)";
	player->shape[L_DOWN][2] = "  ^ ";
	player->shape[L_DOWN][3] = " - - ";

	player->shape[DOWN][0] = "  O ";
	player->shape[DOWN][1] = " o|o";
	player->shape[DOWN][2] = "  ^ ";
	player->shape[DOWN][3] = " - -";

	player->shape[R_DOWN][0] = "  O";
	player->shape[R_DOWN][1] = " (|o";
	player->shape[R_DOWN][2] = "  ^ ";
	player->shape[R_DOWN][3] = " - -";

	player->die = "어<";

	player->Weaphone[LEFT][0] = "┐";
	player->Weaphone[RIGHT][0] = "┌─";
	player->Weaphone[UP][0] = "|";
	player->Weaphone[DOWN][0] = "|";
	player->Weaphone[R_UP][0] = "/";
	player->Weaphone[L_UP][0] = "\\";
	player->Weaphone[L_DOWN][0] = "/";
	player->Weaphone[R_DOWN][0] = "\\";

	player->Weaphone[LEFT][1] = "─┬┐";
	player->Weaphone[RIGHT][1] = "┌┬─";
	player->Weaphone[UP][1] = "┃";
	player->Weaphone[DOWN][1] = "┃";
	player->Weaphone[R_UP][1] = "/";
	player->Weaphone[L_UP][1] = "\\";
	player->Weaphone[L_DOWN][1] = "/";
	player->Weaphone[R_DOWN][1] = "\\";

#pragma endregion
}
void PlayerProgress(int(*Map)[MapX])
{
	player->bulletDelay[PISTOL][NOW_TIME]++;
	player->bulletDelay[RIFLE][NOW_TIME]++;
	player->bulletDelay[BOMB][NOW_TIME]++;

	if (GetAsyncKeyState(VK_LEFT) && Map[player->y][player->x - 1] < 5 && Map[player->y - 1][player->x] < 5 && Map[player->y - 2][player->x] < 5 && Map[player->y - 3][player->x] < 5)
	{
		player->x--;
		player->direction = LEFT;
		player->moveDriction = LEFT;
		if (player->x < MapPos) { player->x++; }
	}
	if (GetAsyncKeyState(VK_RIGHT) && Map[player->y][player->x + 2] < 5 && Map[player->y - 1][player->x + 1] < 5 && Map[player->y - 3][player->x + 2] < 5)
	{
		player->x++;
		player->direction = RIGHT;
		player->moveDriction = RIGHT;
		if (40 < player->x - MapPos && MapPos + ScreenX < MapX)
		{
			MapPos++;
		}
	}
	if (GetAsyncKeyState(VK_UP))
	{
		player->direction = UP;
	}
	if (GetAsyncKeyState(VK_DOWN))
	{
		player->direction = DOWN;
	}

	if (GetAsyncKeyState(0x31))//KeyPad1
	{
		player->weaponNum = PISTOL;
	}
	if (GetAsyncKeyState(0x32) && player->bulletNum[RIFLE] > 0)//KeyPad2
	{
		player->weaponNum = RIFLE;
	}
	
	if (GetAsyncKeyState(VK_RIGHT) && GetAsyncKeyState(VK_UP)) { player->direction = R_UP; }
	if (GetAsyncKeyState(VK_RIGHT) && GetAsyncKeyState(VK_DOWN)) { player->direction = R_DOWN; }
	if (GetAsyncKeyState(VK_LEFT) && GetAsyncKeyState(VK_UP)) { player->direction = L_UP; }
	if (GetAsyncKeyState(VK_LEFT) && GetAsyncKeyState(VK_DOWN)) { player->direction = L_DOWN; }
	if (GetAsyncKeyState(0x41))
	{
		switch (player->weaponNum)
		{
		case PISTOL:
			if (player->bulletDelay[PISTOL][MAX_TIME] <= player->bulletDelay[PISTOL][NOW_TIME])
			{
				PlayerBulletInit(PistolSpeed, 1+player->pistolDamage, PISTOL, Map);
				player->bulletDelay[PISTOL][NOW_TIME] = 0;
			}

			break;
		case RIFLE:
			if (player->bulletDelay[RIFLE][MAX_TIME] <= player->bulletDelay[RIFLE][NOW_TIME])
			{
				PlayerBulletInit(RifleSpeed, 3, RIFLE, Map);
				player->bulletDelay[RIFLE][NOW_TIME] = 0;
				player->bulletNum[RIFLE]--;
			}
			if (player->bulletNum[RIFLE] == 0) { player->weaponNum = PISTOL; }
			break;
		
		default:
			break;
		}

	}
	if (GetAsyncKeyState(0x46) && player->bulletNum[BOMB]>0) {
		if (player->bulletDelay[BOMB][MAX_TIME] <= player->bulletDelay[BOMB][NOW_TIME])
		{
			PlayerBombInit();
			player->bulletNum[BOMB]--;
			player->bulletDelay[BOMB][NOW_TIME] = 0;
		}
	}

	if (GetAsyncKeyState(VK_RIGHT) && player->isJump) { player->moveDriction = R_UP; }
	if (GetAsyncKeyState(VK_RIGHT) && player->isfloat) { player->moveDriction = R_DOWN; }
	if (GetAsyncKeyState(VK_LEFT) && player->isJump) { player->moveDriction = L_UP; }
	if (GetAsyncKeyState(VK_LEFT) && player->isfloat) { player->moveDriction = L_DOWN; }
	if (player->isJump) { player->moveDriction = UP; }
	if (player->isfloat) { player->moveDriction = DOWN; }

	if (GetAsyncKeyState(VK_SPACE) && !player->isJump && jumpTime > 5)
	{
		player->isJump = true; TIME = 0.f; player->h = player->y + PlayerSizeY;
	}

	if (!(GetAsyncKeyState(VK_LEFT) || GetAsyncKeyState(VK_RIGHT) || player->isJump || player->isfloat))
	{
		player->moveDriction = STAND;
	}
	PlayerGravity(Map);
}
void PlayerRender()
{
	int showGunX = 0;
	int showGunY = 0;

	for (int i = 0; i < player->hp; i++)
	{
		if (player->color == WHITE)
		{
			WriteBuffer(1 + i, 1, "♥", RED);
		}
		else
		{
			WriteBuffer(1 + i, 1, "♥", WHITE);
		}

	}
	for (int i = 0; i < player->MaxHp - player->hp; i++) {
		WriteBuffer(1 +player->hp + i, 1, "♡", RED);
	}

	for (int i = 0; i < PlayerSizeY; i++)
	{
		WriteBuffer(player->x - MapPos, player->y - i, player->shape[player->direction][PlayerSizeY - i - 1], player->color);
	}
	switch (player->direction)
	{
	case RIGHT:
		showGunX = 2;
		showGunY = -2;
		break;
	case R_UP:
		showGunX = 2;
		showGunY = -3;
		break;
	case UP:
		showGunX = 1;
		showGunY = -4;
		break;
	case L_UP:
		showGunY = -3;
		break;
	case LEFT:
		if (player->weaponNum == RIFLE)
		{
			showGunX = -1;
		}
		showGunY = -2;
		break;
	case L_DOWN:
		showGunY = -1;
		break;
	case DOWN:
		showGunX = 1;
		break;
	case R_DOWN:
		showGunX = 2;
		showGunY = -1;
		break;
	default:
		break;
	}
	WriteBuffer(player->x + showGunX - MapPos, player->y + showGunY, player->Weaphone[player->direction][player->weaponNum], CYAN);

}
void PlayerRelease()
{
	free(player);
	player = nullptr;
}
void PlayerHpDownEffect()
{
	if (player->isDownHp)
	{
		player->color = RED;
		player->downHpDelay[NOW_TIME]++;
		if (player->downHpDelay[NOW_TIME] >= player->downHpDelay[MAX_TIME])
		{
			player->isDownHp = false;
			player->downHpDelay[NOW_TIME] = 0;
			player->color = WHITE;
		}
	}
}
void PlayerReplace(int x, int y)
{
	player->x = x;
	player->y = y;
}
void PlayerKnifeAttack()
{
	for (int i = 0; i < enemyCount; i++)
	{
		if (enemy[i] != nullptr)
		{
			for (int j = 0; j < 3; j++)
			{
				if (player->x + PlayerSizeX+1 > enemy[i]->x && player->y > enemy[i]->y && player->x < enemy[i]->x + EnemySizeX && player->y - PlayerSizeY < enemy[i]->y + EnemySizeY && enemy[i]->hp>0)
				{
					WriteBuffer(player->x - MapPos, player->y + 2, "[근접A]", LIGHTCYAN);
					if (GetAsyncKeyState(0x41))
					{
						enemy[i]->hp = 0;
					}
				}
			}
		}
	}
	if (drone != nullptr) {
		if (player->x + PlayerSizeX + 1 > drone->x && player->y > drone->y && player->x < drone->x + 3 && player->y - PlayerSizeY < drone->y + 3 && drone->hp>0) {
			drone->hp = 0;
		}
	}
	
}
bool PlayerDieProgress()
{
	if (player->hp <= 0)
	{
		DieTime++;
	}
	if (DieTime > 20)
	{
		if (DieProgress() == 1)
		{
			if (RetryCount <= 0)
			{
				free(savePlayer);
				savePlayer = nullptr;
			}
			playerDie = true;
			leftScreen = false;
			DieTime = 0;
			return true;
		}
	}
	return false;
}
#pragma endregion

#pragma region Physics
void PlayerGravity(int(*Map)[MapX])
{
	jumpTime++;
	if (player->isJump)
	{
		int pos1 = player->y;
		TIME += 0.2f;
		player->y = player->h - V * TIME + 0.5f * G * TIME * TIME;
		int pos2 = player->y;

		int gab = pos2 - pos1;
		if (gab > 0)
		{
			for (int i = 0; i < gab; i++)
			{
				if (Map[pos1 + i][player->x] > 4 || Map[pos1 + i][player->x + 1] > 4)
				{
					player->y = pos1 + i - 1;
					player->isJump = false;
					break;
				}
			}
		}
		if (gab < 0)
		{
			for (int i = 0; i < gab * -1; i++)
			{
				if (Map[pos1 - i - 3][player->x] > 4 || Map[pos1 - i - 3][player->x + 1] > 4)
				{
					player->y = pos1 - i;
					player->isJump = false;
					break;
				}
			}
		}
	}
	if (!player->isJump && Map[player->y + 1][player->x] < 4 && Map[player->y + 1][player->x + 1] < 4)
	{
		player->isfloat = true;
		TIME = 0.f;
		player->h = player->y;

	}
	if (player->isfloat)
	{

		int p1 = player->y;
		TIME += 0.2f;
		player->y = player->h + V * TIME + 0.5f * G * TIME * TIME;
		int p2 = player->y;
		int gab = p2 - p1;
		for (int i = 0; i < gab; i++)
		{
			if (Map[p1 + i][player->x] > 4 && Map[p1 + i][player->x + 1] > 4)
			{
				player->y = p1 + i - 1;
				player->isfloat = false;
				jumpTime = 0;
				break;
			}
		}

	}
}
void EnemyGravity(int(*Map)[MapX])
{
	for (int i = 0; i < enemyCount; i++)
	{
		if (enemy[i] != nullptr)
		{
			if (Map[enemy[i]->y + EnemySizeY][enemy[i]->x] < 4)
				enemy[i]->y++;
		}
	}
}
#pragma endregion

#pragma region Bullet
void BulletShapeInit()
{
	bulletShape[PISTOL][RIGHT] = "--";
	bulletShape[PISTOL][R_UP] = "/";
	bulletShape[PISTOL][UP] = "|";
	bulletShape[PISTOL][L_UP] = "\\";
	bulletShape[PISTOL][LEFT] = "--";
	bulletShape[PISTOL][L_DOWN] = "/";
	bulletShape[PISTOL][DOWN] = "|";
	bulletShape[PISTOL][R_DOWN] = "\\";

	bulletShape[RIFLE][RIGHT] = ">";
	bulletShape[RIFLE][R_UP] = "ㄱ";
	bulletShape[RIFLE][UP] = "ㅅ";
	bulletShape[RIFLE][L_UP] = "┌─";
	bulletShape[RIFLE][LEFT] = "<";
	bulletShape[RIFLE][L_DOWN] = "ㄴ";
	bulletShape[RIFLE][DOWN] = "\\/";
	bulletShape[RIFLE][R_DOWN] = "─┘";
}
void PlayerBulletInit(double speed, int damage, int weaponNumber, int(*Map)[MapX])
{
	for (int i = 0; i < playerBulletCount; i++)
	{
		if (playerBullet[i] == nullptr)
		{
			playerBullet[i] = (Gun*)malloc(sizeof(Gun));
			for (int j = 0; j < 4; j++)
			{
				playerBullet[i]->bullet[j] = (Bullet*)malloc(sizeof(Bullet));
				switch (player->direction)
				{
				case RIGHT:
					playerBullet[i]->bullet[j]->x = player->x + 3 + j;
					playerBullet[i]->bullet[j]->y = player->y + GunY;
					break;
				case R_UP:
					playerBullet[i]->bullet[j]->x = player->x + 2 + j;
					playerBullet[i]->bullet[j]->y = player->y - 1 + GunY - j;
					break;
				case UP:
					playerBullet[i]->bullet[j]->x = player->x + 1;
					playerBullet[i]->bullet[j]->y = player->y - 2 + GunY - j;
					break;
				case L_UP:
					playerBullet[i]->bullet[j]->x = player->x - j;
					playerBullet[i]->bullet[j]->y = player->y - 1 + GunY - j;
					break;
				case LEFT:
					playerBullet[i]->bullet[j]->x = player->x - 1 - j;
					playerBullet[i]->bullet[j]->y = player->y + GunY;
					break;
				case L_DOWN:
					playerBullet[i]->bullet[j]->x = player->x - 1 - j;
					playerBullet[i]->bullet[j]->y = player->y + 1 + j;
					break;
				case DOWN:
					playerBullet[i]->bullet[j]->x = player->x + 1;
					playerBullet[i]->bullet[j]->y = player->y + 1 + j;
					break;
				case R_DOWN:
					playerBullet[i]->bullet[j]->x = player->x + 2 + j;
					playerBullet[i]->bullet[j]->y = player->y + 1 + j;
					break;
				default:
					playerBullet[i]->bullet[j]->x = player->x + 1 + j;
					playerBullet[i]->bullet[j]->y = player->y + GunY;
					break;
				}

				for (int k = 0; k < 8; k++)
				{
					playerBullet[i]->bullet[j]->shape[k] = bulletShape[weaponNumber][k];
				}
				playerBullet[i]->bullet[j]->damage = damage;
				playerBullet[i]->bullet[j]->destroy[0] = " :";
				playerBullet[i]->bullet[j]->destroy[1] = "'.";
				playerBullet[i]->bullet[j]->destroy[2] = "''";
				playerBullet[i]->bullet[j]->destroy[3] = ".'";
				playerBullet[i]->bullet[j]->destroy[4] = ": ";
				playerBullet[i]->bullet[j]->destroy[5] = "'.";
				playerBullet[i]->bullet[j]->destroy[6] = "..";
				playerBullet[i]->bullet[j]->destroy[7] = ".'";
				playerBullet[i]->bullet[j]->direction = player->direction;
				playerBullet[i]->bullet[j]->speed = speed;

				for (int k = 0; k < enemyCount; k++)
				{
					if (enemy[k] != nullptr)
					{
						if (playerBullet[i]->bullet[j]->x == enemy[k]->x && playerBullet[i]->bullet[j]->y == enemy[k]->y)
						{
							enemy[k]->isDownHp = true;
							enemy[k]->hp--;
						}
					}
				}

				if (Map[(int)playerBullet[i]->bullet[j]->y][(int)playerBullet[i]->bullet[j]->x] > 5)
				{
					free(playerBullet[i]); playerBullet[i] = nullptr;
					break;
				}
			}
			break;
		}
	}
}
void DestroyAnimation(int i, int j){
	switch (playerBullet[i]->bullet[j]->direction)
	{
	case RIGHT:
		WriteBuffer(playerBullet[i]->bullet[j]->x - 1 - MapPos, playerBullet[i]->bullet[j]->y, playerBullet[i]->bullet[j]->destroy[0], RED);
		break;
	case R_UP:
		WriteBuffer(playerBullet[i]->bullet[j]->x - 1 - MapPos, playerBullet[i]->bullet[j]->y + 1, playerBullet[i]->bullet[j]->destroy[1], RED);
		break;
	case UP:
		WriteBuffer(playerBullet[i]->bullet[j]->x - MapPos, playerBullet[i]->bullet[j]->y + 1, playerBullet[i]->bullet[j]->destroy[2], RED);
		break;
	case L_UP:
		WriteBuffer(playerBullet[i]->bullet[j]->x + 1 - MapPos, playerBullet[i]->bullet[j]->y + 1, playerBullet[i]->bullet[j]->destroy[3], RED);
		break;
	case LEFT:
		WriteBuffer(playerBullet[i]->bullet[j]->x + 1 - MapPos, playerBullet[i]->bullet[j]->y, playerBullet[i]->bullet[j]->destroy[4], RED);
		break;
	case L_DOWN:
		WriteBuffer(playerBullet[i]->bullet[j]->x + 1 - MapPos, playerBullet[i]->bullet[j]->y - 1, playerBullet[i]->bullet[j]->destroy[5], RED);
		break;
	case DOWN:
		WriteBuffer(playerBullet[i]->bullet[j]->x - MapPos, playerBullet[i]->bullet[j]->y - 1, playerBullet[i]->bullet[j]->destroy[6], RED);
		break;
	case R_DOWN:
		WriteBuffer(playerBullet[i]->bullet[j]->x - 1 - MapPos, playerBullet[i]->bullet[j]->y - 1, playerBullet[i]->bullet[j]->destroy[7], RED);
		break;
	}
}
void PlayerBulletProgress(int(*Map)[MapX])
{
	for (int i = 0; i < playerBulletCount; i++)
	{
		for (int j = 0; j < 4; j++)
		{
			if (playerBullet[i] != nullptr)
			{
				if (playerBullet[i]->bullet[j]->x > MapPos && ScreenX + MapPos > playerBullet[i]->bullet[j]->x)
				{
					WriteBuffer(playerBullet[i]->bullet[j]->x - MapPos, playerBullet[i]->bullet[j]->y, playerBullet[i]->bullet[j]->shape[playerBullet[i]->bullet[j]->direction], YELLOW);
				}

				switch (playerBullet[i]->bullet[j]->direction)
				{
				case RIGHT:
					playerBullet[i]->bullet[j]->x += playerBullet[i]->bullet[j]->speed;
					break;
				case R_UP:
					playerBullet[i]->bullet[j]->x += playerBullet[i]->bullet[j]->speed;
					playerBullet[i]->bullet[j]->y -= playerBullet[i]->bullet[j]->speed;
					break;
				case UP:
					playerBullet[i]->bullet[j]->y -= playerBullet[i]->bullet[j]->speed;
					break;
				case L_UP:
					playerBullet[i]->bullet[j]->x -= playerBullet[i]->bullet[j]->speed;
					playerBullet[i]->bullet[j]->y -= playerBullet[i]->bullet[j]->speed;
					break;
				case LEFT:
					playerBullet[i]->bullet[j]->x -= playerBullet[i]->bullet[j]->speed;
					break;
				case L_DOWN:
					playerBullet[i]->bullet[j]->x -= playerBullet[i]->bullet[j]->speed;
					playerBullet[i]->bullet[j]->y += playerBullet[i]->bullet[j]->speed;
					break;
				case DOWN:
					playerBullet[i]->bullet[j]->y += playerBullet[i]->bullet[j]->speed;
					break;
				case R_DOWN:
					playerBullet[i]->bullet[j]->x += playerBullet[i]->bullet[j]->speed;
					playerBullet[i]->bullet[j]->y += playerBullet[i]->bullet[j]->speed;
					break;
				default:
					playerBullet[i]->bullet[j]->x += playerBullet[i]->bullet[j]->speed;
					break;
				}
				if (playerBullet[i]->bullet[j]->x < MapPos - RanderSpare || ScreenX + MapPos + RanderSpare < playerBullet[i]->bullet[j]->x || playerBullet[i]->bullet[j]->y < 0 || playerBullet[i]->bullet[j]->y>MapY)
				{
					for (int k = 0; k < 4; k++)
					{
						free(playerBullet[i]->bullet[k]);
						playerBullet[i]->bullet[j] = nullptr;
					}
					free(playerBullet[i]);
					playerBullet[i] = nullptr;
				}
				else if (Map[playerBullet[i]->bullet[j]->y][playerBullet[i]->bullet[j]->x] > 5 && playerBullet[i]->bullet[j]->x > MapPos && ScreenX + MapPos > playerBullet[i]->bullet[j]->x)
				{
					DestroyAnimation(i, j);
					for (int k = 0; k < 4; k++)
					{
						free(playerBullet[i]->bullet[k]);
						playerBullet[i]->bullet[j] = nullptr;
					}
					free(playerBullet[i]);
					playerBullet[i] = nullptr;
					continue;
				}
				if (drone != nullptr && playerBullet[i] !=nullptr)
				{
					if (drone->x< playerBullet[i]->bullet[j]->x &&drone->x+5 > playerBullet[i]->bullet[j]->x   && playerBullet[i]->bullet[j]->y > drone->y && playerBullet[i]->bullet[j]->y< drone->y+4)
					{
						drone->hp -= playerBullet[i]->bullet[j]->damage;
						DestroyAnimation(i, j);
						for (int k = 0; k < 4; k++)
						{
							free(playerBullet[i]->bullet[k]);
							playerBullet[i]->bullet[j] = nullptr;
						}
						free(playerBullet[i]);
						playerBullet[i] = nullptr;
						continue;
					}
				}
				 
				for (int s = 0; s < 4; s++)
				{
					for (int k = 0; k < enemyCount; k++)
					{
						
						if (enemy[k] != nullptr && playerBullet[i] != nullptr)
						{
							if (playerBullet[i]->bullet[j]->x >= enemy[k]->x && playerBullet[i]->bullet[j]->x < enemy[k]->x + EnemySizeX - 1 && playerBullet[i]->bullet[j]->y >= enemy[k]->y && playerBullet[i]->bullet[j]->y < enemy[k]->y + EnemySizeY && enemy[k]->hp > 0)
							{
								enemy[k]->isDownHp = true;
								enemy[k]->hp -= playerBullet[i]->bullet[j]->damage;
								for (int k = 0; k < 4; k++)
								{
									free(playerBullet[i]->bullet[k]);
									playerBullet[i]->bullet[j] = nullptr;
								}
								free(playerBullet[i]);
								playerBullet[i] = nullptr;
							}
						}
					}
				}
			}
		}

	}
}
void EnemyBulletInit(Enemy* enemy)
{
	for (int i = 0; i < enemyBulletCount; i++)
	{
		if (enemyBullet[i] == nullptr)
		{
			enemyBullet[i] = (Bullet*)malloc(sizeof(Bullet));
			enemyBullet[i]->color = LIGHTGREEN;
			enemyBullet[i]->destroy[0] = " :";
			enemyBullet[i]->destroy[1] = "'.";
			enemyBullet[i]->destroy[2] = "''";
			enemyBullet[i]->destroy[3] = ".'";
			enemyBullet[i]->destroy[4] = ": ";
			enemyBullet[i]->destroy[5] = "'.";
			enemyBullet[i]->destroy[6] = "..";
			enemyBullet[i]->destroy[7] = ".'";
			if (enemy->Lv == 1)
			{
				enemyBullet[i]->shape[0] = "&";
				enemyBullet[i]->damage = 1;
				enemyBullet[i]->Xcount[0] = 2;
				enemyBullet[i]->Xcount[1] = 0;
				enemyBullet[i]->Ycount[0] = 2;
				enemyBullet[i]->Ycount[1] = 0;
				enemyBullet[i]->speed = 1;
			}
			else if (enemy->Lv == 2)
			{
				enemyBullet[i]->shape[0] = "⇔";
				enemyBullet[i]->damage = 2;
				enemyBullet[i]->Xcount[0] = 2;
				enemyBullet[i]->Xcount[1] = 0;
				enemyBullet[i]->Ycount[0] = 2;
				enemyBullet[i]->Ycount[1] = 0;
				enemyBullet[i]->speed = 1;
			}
			else if (enemy->Lv == 3)
			{
				enemyBullet[i]->shape[0] = "+";
				enemyBullet[i]->damage = 3;
			}

			int x = player->x - enemy->x;
			int y = player->y - PlayerSizeY + 1 - enemy->y;
			if (y == 0 && x > 0)
			{
				enemyBullet[i]->direction = 0;
				enemyBullet[i]->x = enemy->x + 1 - 3;
				enemyBullet[i]->y = enemy->y;
			}
			else if (x > 0 && y < 0)
			{
				enemyBullet[i]->direction = 1;
				enemyBullet[i]->x = enemy->x + 1;
				enemyBullet[i]->y = enemy->y - 1;
			}
			else if (x == 0 && y < 0)
			{
				enemyBullet[i]->direction = 2;
				enemyBullet[i]->x = enemy->x;
				enemyBullet[i]->y = enemy->y - 1;
			}
			else if (x < 0 && y < 0)
			{
				enemyBullet[i]->direction = 3;
				enemyBullet[i]->x = enemy->x - 1;
				enemyBullet[i]->y = enemy->y - 1;
			}
			else if (y == 0 && x < 0)
			{
				enemyBullet[i]->direction = 4;
				enemyBullet[i]->x = enemy->x - 1;
				enemyBullet[i]->y = enemy->y;
			}
			else if (x < 0 && y>0)
			{
				enemyBullet[i]->direction = 5;
				enemyBullet[i]->x = enemy->x - 1;
				enemyBullet[i]->y = enemy->y + 1;
			}
			else if (x == 0 && y > 0)
			{
				enemyBullet[i]->direction = 6;
				enemyBullet[i]->x = enemy->x;
				enemyBullet[i]->y = enemy->y + 1;
			}
			else if (x > 0 && y > 0)
			{
				enemyBullet[i]->direction = 7;
				enemyBullet[i]->x = enemy->x + 1;
				enemyBullet[i]->y = enemy->y + 1;
			}
			else
			{
				enemyBullet[i]->direction = 0;
				enemyBullet[i]->x = enemy->x + 1;
				enemyBullet[i]->y = enemy->y;
			}
			break;
		}
	}
}
void EnemyBulletProgress(int(*Map)[MapX])
{
	if (player != nullptr)
	{

		for (int i = 0; i < enemyCount; i++)
		{
			if (enemy[i] != nullptr && enemy[i]->hp > 0)
			{

				if (enemy[i]->rerodingTime[MAX_TIME] <= enemy[i]->rerodingTime[NOW_TIME])
				{
					EnemyBulletInit(enemy[i]);
					enemy[i]->rerodingTime[NOW_TIME] = 0;
				}
				else
					enemy[i]->rerodingTime[NOW_TIME]++;
			}
		}

		for (int i = 0; i < enemyBulletCount; i++)
		{
			if (enemyBullet[i] != nullptr)
			{
				if (enemyBullet[i]->x < MapPos || enemyBullet[i]->x>MapPos + ScreenX || enemyBullet[i]->y < 0 || enemyBullet[i]->y>30)
				{
					free(enemyBullet[i]);
					enemyBullet[i] = nullptr;
				}
				else if (Map[enemyBullet[i]->y][enemyBullet[i]->x] > 5 || (enemyBullet[i]->x >= player->x && enemyBullet[i]->x<player->x + PlayerSizeX && enemyBullet[i]->y > player->y - PlayerSizeY && enemyBullet[i]->y <= player->y))
				{
					if (enemyBullet[i]->x >= player->x && enemyBullet[i]->x<player->x + PlayerSizeX && enemyBullet[i]->y > player->y - PlayerSizeY && enemyBullet[i]->y <= player->y)
					{
						player->hp -= enemyBullet[i]->damage;
						WriteBuffer(player->x + 1 - MapPos, player->y - 6, "아야!", WHITE);
						player->isDownHp = true;
					}
					switch (enemyBullet[i]->direction)
					{
					case 0:
						WriteBuffer(enemyBullet[i]->x - 1 - MapPos, enemyBullet[i]->y, enemyBullet[i]->destroy[0], WHITE);
						break;
					case 1:
						WriteBuffer(enemyBullet[i]->x - 1 - MapPos, enemyBullet[i]->y + 1, enemyBullet[i]->destroy[1], WHITE);
						break;
					case 2:
						WriteBuffer(enemyBullet[i]->x - MapPos, enemyBullet[i]->y + 1, enemyBullet[i]->destroy[2], WHITE);
						break;
					case 3:
						WriteBuffer(enemyBullet[i]->x + 1 - MapPos, enemyBullet[i]->y + 1, enemyBullet[i]->destroy[3], WHITE);
						break;
					case 4:
						WriteBuffer(enemyBullet[i]->x + 1 - MapPos, enemyBullet[i]->y, enemyBullet[i]->destroy[4], WHITE);
						break;
					case 5:
						WriteBuffer(enemyBullet[i]->x + 1 - MapPos, enemyBullet[i]->y - 1, enemyBullet[i]->destroy[5], WHITE);
						break;
					case 6:
						WriteBuffer(enemyBullet[i]->x - MapPos, enemyBullet[i]->y - 1, enemyBullet[i]->destroy[6], WHITE);
						break;
					case 7:
						WriteBuffer(enemyBullet[i]->x - 1 - MapPos, enemyBullet[i]->y - 1, enemyBullet[i]->destroy[7], WHITE);
						break;
					}
					free(enemyBullet[i]);
					enemyBullet[i] = nullptr;
				}
				else
				{


					WriteBuffer(enemyBullet[i]->x - MapPos, enemyBullet[i]->y, enemyBullet[i]->shape[0], enemyBullet[i]->color);


					switch (enemyBullet[i]->direction)
					{
					case 0:
						enemyBullet[i]->x++;
						break;
					case 1:
						enemyBullet[i]->Xcount[1] += enemyBullet[i]->speed;
						enemyBullet[i]->Ycount[1] += enemyBullet[i]->speed;
						if (enemyBullet[i]->Xcount[0] <= enemyBullet[i]->Xcount[1])
						{
							enemyBullet[i]->Xcount[1] = 0;
							enemyBullet[i]->x += enemyBullet[i]->speed;
						}
						if (enemyBullet[i]->Ycount[0] <= enemyBullet[i]->Ycount[1])
						{
							enemyBullet[i]->Ycount[1] = 0;
							enemyBullet[i]->y -= enemyBullet[i]->speed;
						}
						break;
					case 2:
						enemyBullet[i]->y -= enemyBullet[i]->speed;
						break;
					case 3:
						enemyBullet[i]->Xcount[1]++;
						enemyBullet[i]->Ycount[1]++;
						if (enemyBullet[i]->Xcount[0] <= enemyBullet[i]->Xcount[1])
						{
							enemyBullet[i]->Xcount[1] = 0;
							enemyBullet[i]->x -= enemyBullet[i]->speed;
						}
						if (enemyBullet[i]->Ycount[0] <= enemyBullet[i]->Ycount[1])
						{
							enemyBullet[i]->Ycount[1] = 0;
							enemyBullet[i]->y -= enemyBullet[i]->speed;
						}
						break;
					case 4:
						enemyBullet[i]->x -= enemyBullet[i]->speed;
						break;
					case 5:
						enemyBullet[i]->Xcount[1]++;
						enemyBullet[i]->Ycount[1]++;
						if (enemyBullet[i]->Xcount[0] <= enemyBullet[i]->Xcount[1])
						{
							enemyBullet[i]->Xcount[1] = 0;
							enemyBullet[i]->x -= enemyBullet[i]->speed;
						}
						if (enemyBullet[i]->Ycount[0] <= enemyBullet[i]->Ycount[1])
						{
							enemyBullet[i]->Ycount[1] = 0;
							enemyBullet[i]->y += enemyBullet[i]->speed;
						}
						break;
					case 6:
						enemyBullet[i]->y += enemyBullet[i]->speed;
						break;
					case 7:
						enemyBullet[i]->Xcount[1]++;
						enemyBullet[i]->Ycount[1]++;
						if (enemyBullet[i]->Xcount[0] <= enemyBullet[i]->Xcount[1])
						{
							enemyBullet[i]->Xcount[1] = 0;
							enemyBullet[i]->x += enemyBullet[i]->speed;
						}
						if (enemyBullet[i]->Ycount[0] <= enemyBullet[i]->Ycount[1])
						{
							enemyBullet[i]->Ycount[1] = 0;
							enemyBullet[i]->y += enemyBullet[i]->speed;
						}
						break;
					default:
						break;
					}
				}
			}
		}

	}
}
void PlayerBombInit()
{
	if (bomb == nullptr && player->bulletNum[BOMB] > 0)
	{
		bomb = (Bomb*)malloc(sizeof(Bomb));
		bomb->x = player->x;
		bomb->y = player->y - 3;
		bomb->time = 0.f;
		bomb->responTime = 0;
		bomb->shape = "ㆁ";
		bomb->isAttack = false;
		bomb->direction = player->direction;
		bomb->Xspeed = 0;
		bomb->YSpeed = 0;
		bomb->V = 2.0f;

		switch (bomb->direction)
		{
		case RIGHT:
		case R_UP:
		case R_DOWN:
			bomb->Xspeed += 1;
			break;
		case UP:
			bomb->V = 5.0f;
			break;
		case L_UP:
		case LEFT:
		case L_DOWN:
			bomb->Xspeed -= 1;
			break;
		case DOWN:
			break;
		default:
			break;
		}
		bomb->isbump = false;
	}
}
void BombProgress(int(*Map)[MapX])
{
	if (bomb != nullptr)
	{
		if (!bomb->isbump)
		{
			bomb->x += bomb->Xspeed;
			bomb->y += bomb->YSpeed;

			int pos1 = bomb->y;
			bomb->time += 0.1;
			bomb->y = bomb->y - bomb->V * bomb->time + 0.5f * BombG * bomb->time * bomb->time;
			int pos2 = bomb->y;
			int gab = pos2 - pos1;
			WriteBuffer(bomb->x - MapPos, bomb->y, bomb->shape, WHITE);
			if (gab == 0)
			{
				if (Map[bomb->y][bomb->x] > 5)
				{
					bomb->y = bomb->y - 1;
					bomb->isbump = true;
				}
			}
			if (gab > 0)
			{
				for (int i = 0; i <= gab; i++)
				{
					if (Map[bomb->y + i][bomb->x] > 5)
					{
						bomb->y = bomb->y + i - 1;
						bomb->isbump = true;
						break;
					}
				}
			}
			else
			{
				for (int i = 0; i <= gab * -1; i++)
				{
					if (Map[bomb->y - i][bomb->x] > 5)
					{
						bomb->y = bomb->y - i + 1;
						bomb->isbump = true;
						break;
					}
				}
			}
		}
		if (bomb->isbump)
		{

			for (int i = 0; i < 10; i++)
			{
				for (int j = 0; j < 10; j++)
				{
					if (MapPos < bomb->x - 5 + i && bomb->x - 5 + i < MapPos + ScreenX && bomb->y - 7 + j < MapX)
					{
						WriteBuffer(bomb->x - 5 + i - MapPos, bomb->y - 7 + j, "※", RED);
					}
					if (boss != nullptr && !bomb->isAttack) {
						if (boss->x == (bomb->x - 5 + i) && boss->y+2 == (bomb->y - 7 + j)) {
							bomb->isAttack = true;
							boss->hp -= 30;
						}
					}
					if (Map[bomb->y - 7 + j][bomb->x - 5 + i] == 7)
					{
						Map[bomb->y - 7 + j][bomb->x - 5 + i] = 0;
					}
					for (int k = 0; k < enemyCount; k++)
					{
						if (enemy[k] != nullptr)
						{
							if (enemy[k]->x == (bomb->x - 5 + i) && enemy[k]->y == (bomb->y - 7 + j))
							{
								if (bomb->responTime == 0)
								{
									enemy[k]->hp -= 30;
								}
							}
						}
					}
				}
			}
			bomb->responTime++;
			if (bomb->responTime >= 10)
			{
				free(bomb);
				bomb = nullptr;
			}
		}


	}
}
#pragma endregion

#pragma region Drone
void DroneInit()
{
	if (drone == nullptr)
	{
		drone = (ExploeDrone*)malloc(sizeof(ExploeDrone));
		drone->x = MapPos + ScreenX;
		drone->y = 4;
		drone->hp = 2;
		drone->isFall = false;
		drone->animation = 0;
		drone->moveDelay[NOW_TIME] = 0;
		drone->moveDelay[MAX_TIME] = 2;


		drone->shape[0][0] = "──-── ──-──";
		drone->shape[0][1] = "  ┗─┬┬┬─┘";
		drone->shape[0][2] = "  /( ◎)\\  ";

		drone->shape[1][0] = " ─-─   ─-─ ";
		drone->shape[1][1] = "  ┗─┬┬┬─┘";
		drone->shape[1][2] = "  /( ◎)\\  ";

		drone->shape[2][0] = "  -     -";
		drone->shape[2][1] = "  ┗─┬┬┬─┘";
		drone->shape[2][2] = "  /( ◎)\\  ";

		drone->shape[3][0] = " ─-─   ─-─ ";
		drone->shape[3][1] = "  ┗─┬┬┬─┘";
		drone->shape[3][2] = "  /( ◎)\\  ";
	}
}
void DroneRandomSpone()
{
	if (rand() % 100 < 1)
	{
		DroneInit();
	}
}
void DroneRender()
{

	if (drone != nullptr)
	{
		for (int i = 0; i < 3; i++) {
		WriteBuffer(drone->x-MapPos, drone->y+i, drone->shape[drone->animation][i], WHITE);
		drone->animation++;
		if (drone->animation >= 4) { drone->animation = 0; }
		}
	}

}
void DroneProgress()
{
	if (drone != nullptr)
	{
		if (drone->x > player->x&& !drone->isFall)
			drone->x--;
		if (drone->x < player->x && !drone->isFall)
			drone->x++;
		
		if(drone->x ==player->x){ 
			drone->isFall = true; 
			
		}
		if (drone->isFall) {
			drone->moveDelay[NOW_TIME]++;
		}
		if (drone->moveDelay[NOW_TIME] >= drone->moveDelay[MAX_TIME] && drone->x > player->x && drone->isFall) {

			drone->x--;
			drone->moveDelay[NOW_TIME] = 0;
		}
		if (drone->moveDelay[NOW_TIME] >= drone->moveDelay[MAX_TIME] && drone->x < player->x && drone->isFall) {
			drone->x++;
			drone->moveDelay[NOW_TIME] = 0;
		}
			

		if (drone->moveDelay[NOW_TIME] >= drone->moveDelay[MAX_TIME])
		{
			drone->y++; 
			drone->moveDelay[NOW_TIME] = 0;
		}
		if (drone->hp <= 0)
		{
			free(drone);
			drone = nullptr;
		}
		else if (drone->x == player->x && drone->y == player->y)
		{
			player->hp -= 2;
			player->isDownHp = true;
			free(drone);
			drone = nullptr;
		}
		
	}
}
#pragma endregion

#pragma region UI
void MapRender(int(*Map)[MapX])
{
	for (int y = 0; y < MapY - 1; y++)
	{
		WriteBuffer(ScreenX, y, "│ ", 7);
	}

	for (int y = 0; y < MapY; y++)
	{
		for (int x = MapPos; x < ScreenX + MapPos; x++)
		{
			switch (Map[y][x])
			{

			case 5:
				WriteBuffer(x - MapPos, y, "ㅡ", LIGHTGRAY);
				break;
			case 6:
				WriteBuffer(x - MapPos, y, "■", LIGHTGRAY);
				break;
			case 7:
				WriteBuffer(x - MapPos, y, "▦", LIGHTGRAY);
				break;
			default:
				break;
			}
		}
	}

}
void GunUI_Init()
{
	WeaphoneMap[0][0] = "┌──────┐ ";
	WeaphoneMap[0][1] = "└────┐ │ ";
	WeaphoneMap[0][2] = "     └─┘ ";

	WeaphoneMap[1][0] = "┌────────────────┐ ";
	WeaphoneMap[1][1] = "└───────┐  │───┐ │ ";
	WeaphoneMap[1][2] = "        └──┘   └─┘ ";

	WeaphoneMap[2][0] = "┌──││──┐_* ";
	WeaphoneMap[2][1] = "┌──││──┐_* ";
	WeaphoneMap[2][2] = "┌──││──┐_* ";

}
void GunUI_Rander()
{
	_itoa(player->bulletNum[RIFLE], Bullet1_Num, 10);
	_itoa(player->bulletNum[BOMB], Bullet2_Num, 10);

	if (player->weaponNum == PISTOL)
	{
		for (int i = 0; i < 3; i++)
		{
			WriteBuffer(1, 30 + i, WeaphoneMap[0][i], CYAN);
		}

		for (int i = 0; i < 3; i++)
		{
			WriteBuffer(8, 30 + i, WeaphoneMap[1][i], WHITE);

		}
		for (int i = 0; i < 3; i++)
		{
			WriteBuffer(20, 30 + i, WeaphoneMap[2][i], WHITE);
		}
		WriteBuffer(2, 33, "[1]", CYAN);
		WriteBuffer(8, 33, "[2]", WHITE);
		WriteBuffer(2, 34, "∞", CYAN);
		WriteBuffer(8, 34, Bullet1_Num, WHITE);
		WriteBuffer(10, 34, "발", WHITE);
		WriteBuffer(20, 33, "[F]", WHITE);
		WriteBuffer(20, 34, Bullet2_Num, WHITE);

	}
	if (player->weaponNum == RIFLE)
	{

		for (int i = 0; i < 3; i++)
		{
			WriteBuffer(1, 30 + i, WeaphoneMap[0][i], WHITE);
		}
		for (int i = 0; i < 3; i++)
		{
			WriteBuffer(8, 30 + i, WeaphoneMap[1][i], CYAN);
		}
		for (int i = 0; i < 3; i++)
		{
			WriteBuffer(20, 30 + i, WeaphoneMap[2][i], WHITE);
		}
		WriteBuffer(2, 33, "[1]", WHITE);
		WriteBuffer(8, 33, "[2]", CYAN);
		WriteBuffer(2, 34, "∞", WHITE);
		WriteBuffer(8, 34, Bullet1_Num, CYAN);
		WriteBuffer(10, 34, "발", CYAN);
		WriteBuffer(20, 33, "[F]", WHITE);
		WriteBuffer(20, 34, Bullet2_Num, WHITE);

	}
	if (player->weaponNum == BOMB)
	{

		for (int i = 0; i < 3; i++)
		{
			WriteBuffer(1, 30 + i, WeaphoneMap[0][i], WHITE);
		}
		for (int i = 0; i < 3; i++)
		{
			WriteBuffer(8, 30 + i, WeaphoneMap[1][i], WHITE);
		}
		for (int i = 0; i < 3; i++)
		{
			WriteBuffer(20, 30 + i, WeaphoneMap[2][i], CYAN);

		}
		WriteBuffer(2, 33, "[1]", WHITE);
		WriteBuffer(8, 33, "[2]", WHITE);
		WriteBuffer(2, 34, "∞", WHITE);
		WriteBuffer(8, 34, Bullet1_Num, WHITE);
		WriteBuffer(10, 34, "발", WHITE);
		WriteBuffer(20, 33, "[3]", CYAN);
		WriteBuffer(20, 34, Bullet2_Num, CYAN);
	}
}
void NextPointer_Init(int x, int y)
{
	if (ResultEnemyCount() == 0)
	{
		WriteBuffer(x, y, "                . ", YELLOW);
		WriteBuffer(x, y + 1, " .. ............;;.", YELLOW);
		WriteBuffer(x, y + 2, " ..::::::::::::;;;;.", YELLOW);
		WriteBuffer(x, y + 3, ". . ::::::::::::;;:'", YELLOW);
		WriteBuffer(x, y + 4, "                :'", YELLOW);
	}

}
void LeftScreen()
{
	if (player->x <= MapPos + 10 && player->x > ScreenX && player->x < MapX - ScreenX - 10)
	{
		leftScreen = true;
	}
	if (leftScreen)
	{
		MapPos--;
		if (MapPos <= player->x - ScreenX + 30)
		{
			leftScreen = false;
		}
	}
}
void StageUI_Rander(int stageNum)
{
	if (countTime < 30)
	{
		for (int i = 0; i < 6; i++)
		{
			WriteBuffer(5 + countTime / 4, 5 + i, stageUI[stageNum][i], LIGHTBLUE);
		}
	}
	else if (countTime < 41)
	{
		for (int i = 0; i < 6; i++)
		{
			WriteBuffer(5 + countTime / 5, 5 + i, stageUI[0][i], LIGHTRED);

		}
	}
	if (countTime < 41)
	{
		WriteBuffer(5 + (countTime / 20), 12, "목표: 안전하게 목적지까지 도달하여라", WHITE);
	}

}
void StageUI()
{
	stageUI[0][0] = "      ";
	stageUI[0][1] = "   ____ _____     / / ";
	stageUI[0][2] = "  / __ `/ __ \\   / / ";
	stageUI[0][3] = " / /_/ / /_/ /  /_/ ";
	stageUI[0][4] = " \\__, /\____/  (_) ";
	stageUI[0][5] = "/____/                 ";

	stageUI[1][0] = "         __                      ___";
	stageUI[1][1] = "   _____/ /_____ _____ ____     <  /";
	stageUI[1][2] = "  / ___/ __/ __ `/ __ `/ _ \\    / / ";
	stageUI[1][3] = " (__  ) /_/ /_/ / /_/ /  __/   / /  ";
	stageUI[1][4] = "/____/\\__/\\__,_/\\__, /\\___/   /_/   ";
	stageUI[1][5] = "               /____/               ";

	stageUI[2][0] = "         __                      ___ ";
	stageUI[2][1] = "   _____/ /_____ _____ ____     |__ \\ ";
	stageUI[2][2] = "  / ___/ __/ __ `/ __ `/ _ \\    __/ /";
	stageUI[2][3] = " (__  ) /_/ /_/ / /_/ /  __/   / __/ ";
	stageUI[2][4] = "/____/\\__/\\__,_/\\__, /\\___/   /____/ ";
	stageUI[2][5] = "               /____/                ";

	stageUI[3][0] = "         __                      _____";
	stageUI[3][1] = "   _____/ /_____ _____ ____     |__  /";
	stageUI[3][2] = "  / ___/ __/ __ `/ __ `/ _ \\     /_ < ";
	stageUI[3][3] = " (__  ) /_/ /_/ / /_/ /  __/   ___/ / ";
	stageUI[3][4] = "/____/\\__/\\__,_/\\__, /\\___/   /____/  ";
	stageUI[3][5] = "               /____/                 ";

	stageUI[4][0] = "         __                      __ __";
	stageUI[4][1] = "   _____/ /_____ _____ ____     / // /";
	stageUI[4][2] = "  / ___/ __/ __ `/ __ `/ _ \\   / // /_";
	stageUI[4][3] = " (__  ) /_/ /_/ / /_/ /  __/  /__  __/";
	stageUI[4][4] = "/____/\\__/\\__,_/\\__, /\\___/     /_/   ";
	stageUI[4][5] = "               /____/                 ";

	stageUI[5][0] = "    ____  ____  __________    ______________   ____________";
	stageUI[5][1] = "   / __ )/ __ \\/ ___/ ___/   / ___/_  __/   | / ____/ ____/";
	stageUI[5][2] = "  / __  / / / /\\__ \\\\__ \\    \\__ \\ / / / /| |/ / __/ __/   ";
	stageUI[5][3] = " / /_/ / /_/ /___/ /__/ /   ___/ // / / ___ / /_/ / /___   ";
	stageUI[5][4] = "/_____/\\____//____/____/   /____//_/ /_/  |_\\____/_____/  ";
	stageUI[5][5] = "";

}
#pragma endregion


#pragma region Enemy
void EnemyRander()
{
	for (int i = 0; i < enemyCount; i++)
	{
		if (enemy[i] != nullptr && enemy[i]->hp > 0 && MapPos < enemy[i]->x && enemy[i]->x < MapPos + ScreenX)
		{
			char* hp = (char*)malloc(sizeof(char) * 10);
			_itoa(enemy[i]->hp, hp, 10);
			WriteBuffer(enemy[i]->x - MapPos + 1, enemy[i]->y - 1, hp, WHITE);
			free(hp);
			hp = nullptr;
			if (enemy[i]->isLeft)
			{
				for (int j = 0; j < 4; j++)
				{
					WriteBuffer(enemy[i]->x - MapPos, enemy[i]->y + j, enemy[i]->shape[0][j], enemy[i]->color);
				}

			}
			else
			{
				for (int j = 0; j < 4; j++)
				{
					WriteBuffer(enemy[i]->x - MapPos, enemy[i]->y + j, enemy[i]->shape[1][j], enemy[i]->color);
				}
			}
		}
		if (enemy[i] != nullptr && enemy[i]->hp <= 0 && MapPos < enemy[i]->x && enemy[i]->x < MapPos + ScreenX)
		{

			for (int j = 0; j < 4; j++)
			{
				switch (player->direction)
				{
				case 0:
				case 1:
				case 2:
				case 7:
					WriteBuffer(enemy[i]->x - MapPos, enemy[i]->y + j, enemy[i]->die[0][j], enemy[i]->color);
					break;
				case 3:
				case 4:
				case 5:
				case 6:
				default:
					WriteBuffer(enemy[i]->x - MapPos, enemy[i]->y + j, enemy[i]->die[1][j], enemy[i]->color);
					break;
				}
			}

			enemy[i]->responTime--;
			if (enemy[i]->responTime <= 0)
			{
				free(enemy[i]);
				enemy[i] = nullptr;
			}

		}
	}
}
void EnemyInit(int(*Map)[MapX])
{
	for (int y = 0; y < MapY; y++)
	{
		for (int x = 0; x < MapX; x++)
		{
			if (Map[y][x] == 1)
			{
				for (int i = 0; i < enemyCount; i++)
				{
					if (enemy[i] == nullptr)
					{
						enemy[i] = (Enemy*)malloc(sizeof(Enemy));
						enemy[i]->x = x;
						enemy[i]->y = y;

						enemy[i]->Lv = 1;
						enemy[i]->rerodingTime[MAX_TIME] = 50;
						enemy[i]->rerodingTime[NOW_TIME] = 0;
						enemy[i]->responTime = 30;

						enemy[i]->shape[0][0] = "i@";
						enemy[i]->shape[0][1] = "o|)";
						enemy[i]->shape[0][2] = " ^ ";
						enemy[i]->shape[0][3] = "- -";

						enemy[i]->shape[1][0] = " @i";
						enemy[i]->shape[1][1] = "(|o";
						enemy[i]->shape[1][2] = " ^ ";
						enemy[i]->shape[1][3] = "- -";

						enemy[i]->die[0][0] = "";
						enemy[i]->die[0][1] = "-   o →";
						enemy[i]->die[0][2] = "  > ㅡ @";
						enemy[i]->die[0][3] = "-";

						enemy[i]->die[1][0] = "";
						enemy[i]->die[1][1] = "← o    -";
						enemy[i]->die[1][2] = "@ ㅡ < ";
						enemy[i]->die[1][3] = "       -";

						enemy[i]->hp = 5;
						enemy[i]->color = LIGHTMAGENTA;

						enemy[i]->isLeft = false;
						enemy[i]->isDownHp = false;
						enemy[i]->downHpDelay[0] = 3;
						enemy[i]->downHpDelay[1] = 0;
						Map[y][x] = 0;
						break;
					}
				}
			}
			if (Map[y][x] == 2)
			{
				for (int i = 0; i < enemyCount; i++)
				{
					if (enemy[i] == nullptr)
					{
						enemy[i] = (Enemy*)malloc(sizeof(Enemy));
						enemy[i]->x = x;
						enemy[i]->y = y;

						enemy[i]->Lv = 2;
						enemy[i]->rerodingTime[MAX_TIME] = 30;
						enemy[i]->rerodingTime[NOW_TIME] = 0;
						enemy[i]->responTime = 30;
						enemy[i]->shape[0][0] = "*@ ";
						enemy[i]->shape[0][1] = "│o|)";
						enemy[i]->shape[0][2] = "  ^ ";
						enemy[i]->shape[0][3] = " - -";

						enemy[i]->shape[1][0] = " @ *";
						enemy[i]->shape[1][1] = "(|o│";
						enemy[i]->shape[1][2] = " ^ ";
						enemy[i]->shape[1][3] = "- -";

						enemy[i]->die[0][0] = "";
						enemy[i]->die[0][1] = "-   o ㅡ*";
						enemy[i]->die[0][2] = "  > ㅡ @";
						enemy[i]->die[0][3] = "-";

						enemy[i]->die[1][0] = "";
						enemy[i]->die[1][1] = "*ㅡ o  -";
						enemy[i]->die[1][2] = "@ ㅡ < ";
						enemy[i]->die[1][3] = "       -";

						enemy[i]->color = RED;
						enemy[i]->hp = 12;

						enemy[i]->color = RED;

						enemy[i]->isLeft = false;
						enemy[i]->isDownHp = false;
						enemy[i]->downHpDelay[0] = 3;
						enemy[i]->downHpDelay[1] = 0;
						Map[y][x] = 0;
						break;
					}
				}
			}
		}
	}



}
void EnemyPorogress(int(*Map)[MapX])
{
	for (int i = 0; i < enemyCount; i++)
	{
		if (enemy[i] != nullptr && enemy[i]->hp > 0)
		{
			if (enemy[i]->y > MapY) {
				free(enemy[i]);
				enemy[i] = nullptr;
				continue;
			}
			if (rand() % 1000 < 1 && Map[enemy[i]->y][enemy[i]->x + 1] < 5 && Map[enemy[i]->y][enemy[i]->x + 1] != 4)
			{
				enemy[i]->moveDir[0] = rand() % 4;
			}
			else if (rand() % 100 < 2 && rand() % 100 >= 1)
			{
				enemy[i]->moveDir[0] = -(rand() % 4);
			}
			else if (rand() % 100 < 10 && rand() % 100 >= 2)
			{
				if (enemy[i]->x < player->x)
				{
					enemy[i]->moveDir[0] = rand() % 4;
				}
				else if (Map[enemy[i]->y][enemy[i]->x - 1] < 5)
				{
					enemy[i]->moveDir[0] = -(rand() % 4);
				}
			}
			if (enemy[i]->moveDir[0] != enemy[i]->moveDir[1])
			{
				if (enemy[i]->moveDir[0] > enemy[i]->moveDir[1] && Map[enemy[i]->y][enemy[i]->x + 1] < 5 && Map[enemy[i]->y][enemy[i]->x + 1] != 4)
				{
					enemy[i]->moveDir[1]++;
					enemy[i]->x++;
					enemy[i]->isLeft = false;
				}
				if (enemy[i]->moveDir[0] < enemy[i]->moveDir[1] && Map[enemy[i]->y][enemy[i]->x - 1] < 5 && Map[enemy[i]->y][enemy[i]->x - 1] != 4)
				{
					enemy[i]->moveDir[1]--;
					enemy[i]->x--;
					enemy[i]->isLeft = true;
				}
			}
			else
			{
				enemy[i]->moveDir[0] = 0;
				enemy[i]->moveDir[1] = 0;
			}
			for (int j = 0; j < enemyCount; j++)
			{
				if (enemy[j] != nullptr && j != i && enemy[i]->x == enemy[j]->x && (enemy[i]->y == enemy[j]->y || enemy[i]->x + 1 == enemy[j]->x - 1 && enemy[i]->y == enemy[j]->y))
				{
					if (Map[enemy[i]->y][enemy[i]->x + 1] != 4)
					{
						enemy[j]->x++;
					}
					if (Map[enemy[i]->y][enemy[i]->x - 1] != 4)
					{
						enemy[i]->x--;
					}
				}
			}
		}
	}
	EnemyGravity(Map);
}
void EnemyHpDownEffect()
{
	for (int i = 0; i < enemyCount; i++)
	{
		if (enemy[i] != nullptr)
		{
			if (enemy[i]->isDownHp)
			{
				switch (enemy[i]->Lv)
				{
				case 1:
					enemy[i]->color = WHITE;
					enemy[i]->downHpDelay[1]++;
					if (enemy[i]->downHpDelay[1] > enemy[i]->downHpDelay[0])
					{
						enemy[i]->isDownHp = false;
						enemy[i]->downHpDelay[1] = 0;
						enemy[i]->color = LIGHTMAGENTA;
					}
					break;
				case 2:
					enemy[i]->color = WHITE;
					enemy[i]->downHpDelay[1]++;
					if (enemy[i]->downHpDelay[1] > enemy[i]->downHpDelay[0])
					{
						enemy[i]->isDownHp = false;
						enemy[i]->downHpDelay[1] = 0;
						enemy[i]->color = RED;
					}
					break;
				default:
					break;
				}

			}
		}
	}
}
int ResultEnemyCount()
{
	int Count = 0;
	for (int i = 0; i < enemyCount; i++)
	{
		if (enemy[i] != nullptr)
		{
			Count++;
		}
	}
	return Count;
}
void RandomEnemyInit(int num)
{
	for (int i = 0; i < enemyCount; i++)
	{
		if (enemy[i] == nullptr)
		{
			if (num == 1) {
				enemy[i] = (Enemy*)malloc(sizeof(Enemy));
				if (rand() % 2 == 0){
					enemy[i]->x = MapPos + ScreenX + rand() % RanderSpare;
				}
				else {
					enemy[i]->x = MapPos - rand() % RanderSpare;
				}
				
				enemy[i]->y = rand() % (MapY - 3);

				enemy[i]->Lv = 1;
				enemy[i]->rerodingTime[MAX_TIME] = 50;
				enemy[i]->rerodingTime[NOW_TIME] = 0;
				enemy[i]->responTime = 30;

				enemy[i]->shape[0][0] = "i@";
				enemy[i]->shape[0][1] = "o|)";
				enemy[i]->shape[0][2] = " ^ ";
				enemy[i]->shape[0][3] = "- -";

				enemy[i]->shape[1][0] = " @i";
				enemy[i]->shape[1][1] = "(|o";
				enemy[i]->shape[1][2] = " ^ ";
				enemy[i]->shape[1][3] = "- -";

				enemy[i]->die[0][0] = "";
				enemy[i]->die[0][1] = "-   o →";
				enemy[i]->die[0][2] = "  > ㅡ @";
				enemy[i]->die[0][3] = "-";

				enemy[i]->die[1][0] = "";
				enemy[i]->die[1][1] = "← o    -";
				enemy[i]->die[1][2] = "@ ㅡ < ";
				enemy[i]->die[1][3] = "       -";

				enemy[i]->hp = 5;
				enemy[i]->color = LIGHTMAGENTA;

				enemy[i]->isLeft = false;
				enemy[i]->isDownHp = false;
				enemy[i]->downHpDelay[0] = 3;
				enemy[i]->downHpDelay[1] = 0;
				break;
			}
			if (num == 2)
			{
				enemy[i] = (Enemy*)malloc(sizeof(Enemy));
				enemy[i]->x = MapPos + ScreenX + rand() % RanderSpare;
				enemy[i]->y = rand() % (MapY - 3);

				enemy[i]->Lv = 2;
				enemy[i]->rerodingTime[MAX_TIME] = 30;
				enemy[i]->rerodingTime[NOW_TIME] = 0;
				enemy[i]->responTime = 30;
				enemy[i]->shape[0][0] = "*@ ";
				enemy[i]->shape[0][1] = "│o|)";
				enemy[i]->shape[0][2] = "  ^ ";
				enemy[i]->shape[0][3] = " - -";

				enemy[i]->shape[1][0] = " @ *";
				enemy[i]->shape[1][1] = "(|o│";
				enemy[i]->shape[1][2] = " ^ ";
				enemy[i]->shape[1][3] = "- -";

				enemy[i]->die[0][0] = "";
				enemy[i]->die[0][1] = "-   o ㅡ*";
				enemy[i]->die[0][2] = "  > ㅡ @";
				enemy[i]->die[0][3] = "-";

				enemy[i]->die[1][0] = "";
				enemy[i]->die[1][1] = "*ㅡ o  -";
				enemy[i]->die[1][2] = "@ ㅡ < ";
				enemy[i]->die[1][3] = "       -";

				enemy[i]->color = RED;
				enemy[i]->hp = 12;

				enemy[i]->color = RED;

				enemy[i]->isLeft = false;
				enemy[i]->isDownHp = false;
				enemy[i]->downHpDelay[0] = 3;
				enemy[i]->downHpDelay[1] = 0;
				break;
			}
		}
	}
}
void RandomEnemySpone(int lv)
{
	RandomSponeDelay++;
	switch (lv)
	{
	case 1:
		if (RandomSponeDelay >200)
		{
			RandomSponeDelay = 0;
			RandomEnemyInit(1);
		}
		break;
	case 2:
		if (RandomSponeDelay > 200)
		{
			RandomSponeDelay = 0;
			RandomEnemyInit(2);
		}
		break;
	default:
		break;
	}

}
#pragma endregion


#pragma region Guide
void GuideMove()
{
	if (guideMove)
	{
		guideStartTime++;
	}
	if (guideStartTime >= 20 && guideMove)
	{
		WriteBuffer(player->x - 1, player->y - 7, "    [↑]     방향키로 플레이어를 ", WHITE);
		WriteBuffer(player->x - 1, player->y - 6, "[←][↓][→]     움직여보세요", WHITE);
		if (GetAsyncKeyState(VK_UP) || GetAsyncKeyState(VK_DOWN) || GetAsyncKeyState(VK_LEFT) || GetAsyncKeyState(VK_RIGHT))
		{
			guideEndTime++;
		}
		if (guideEndTime >= 20 && guideMove)
		{
			guideStartTime = 0;
			guideEndTime = 0;
			guideMove = false;
		}
	}
}
void GuideAttack()
{
	if (guideAttack && !guideMove)
	{
		guideStartTime++;
	}
	if (guideStartTime >= 20 && guideAttack && !guideMove)
	{
		WriteBuffer(player->x - 1, player->y - 7, "총알로 적을 제거해보세요!", WHITE);
		WriteBuffer(player->x - 1, player->y - 6, "[→] +A or A ", WHITE);
		if (GetAsyncKeyState(0x41))
		{
			guideEndTime++;
		}
		if (guideEndTime >= 20 && guideAttack && !guideMove)
		{
			guideStartTime = 0;
			guideEndTime = 0;
			guideAttack = false;
		}
	}
}
void GuideJump()
{
	if (28 < player->x && player->x < 36 && guideJump && !guideAttack)
	{
		guideStartTime++;
	}
	if (guideStartTime >= 10 && guideJump && !guideAttack)
	{
		WriteBuffer(player->x - 1, player->y - 7, "[space]로 점프해보세요", WHITE);
		if (GetAsyncKeyState(VK_SPACE))
		{
			guideEndTime++;
		}
		if (guideEndTime >= 20 && guideJump && !guideAttack)
		{
			guideStartTime = 0;
			guideEndTime = 0;
			guideJump = false;
		}
	}

}
#pragma endregion

#pragma region pat
void PatInit()
{
	if (pat == nullptr)
	{
		pat = (Pat*)malloc(sizeof(Pat));
		pat->x = player->x - 4;
		pat->y = player->y;
		pat->isClimb = false;
		pat->damage = 1;
		pat->expressDellay = 0;
		pat->moveDir = RIGHT;
		pat->moveDelay[NOW_TIME] = 0;
		pat->moveDelay[MAX_TIME] = 2;
		pat->bulletDelay[NOW_TIME] = 0;
		pat->bulletDelay[MAX_TIME] = 50;
		pat->shape[0][0] = "<oo>";
		pat->shape[0][1] = "UㅗU";
		pat->shape[0][2] = "(__)";

		pat->shape[1][0] = "< o>";
		pat->shape[1][1] = " ┌┴┐U";
		pat->shape[1][2] = "(▥▥)";

		pat->shape[2][0] = "<o >";
		pat->shape[2][1] = "U┌┴┐";
		pat->shape[2][2] = "(▥▥)";

		pat->shape[3][0] = "<-->";
		pat->shape[3][1] = "UㅗU";
		pat->shape[3][2] = "(__)";

		pat->shape[4][0] = "< ->";
		pat->shape[4][1] = " ┌┴┐U";
		pat->shape[4][2] = "(▥▥)";

		pat->shape[5][0] = "<- >";
		pat->shape[5][1] = "U┌┴┐";
		pat->shape[5][2] = "(▥▥)";

	}
}
void PatPorogress(int(*Map)[MapX])
{


	pat->moveDelay[NOW_TIME]++;
	pat->bulletDelay[NOW_TIME]++;
	if (pat->moveDelay[NOW_TIME] >= pat->moveDelay[MAX_TIME])
	{
		if (player->x > (int)pat->x + 4 && Map[(int)pat->y][(int)pat->x + 3] < 5)
		{
			pat->x += 1.25;
			pat->moveDir = RIGHT;
			pat->moveDelay[NOW_TIME] = 0;
		}
		if (player->x < (int)pat->x + 4 && Map[(int)pat->y][(int)pat->x - 1] < 5)
		{
			pat->x -= 1.25;
			pat->moveDir = LEFT;
			pat->moveDelay[NOW_TIME] = 0;
		}
		if (Map[(int)pat->y][(int)pat->x + 3] > 5 || Map[(int)pat->y][(int)pat->x-1] > 5)
		{
			pat->y -= 2;
			pat->moveDelay[NOW_TIME] = 0;
		}
		if (Map[(int)pat->y + 1][(int)pat->x] < 5)
		{
			pat->y++;
		}
	}

	if (player->x == (int)(pat->x + 4))
	{
		pat->moveDir = STAND;
	}


	pat->expressDellay++;
	if (pat->expressDellay > 53) {
		pat->expressDellay = 0;
	}
	if (MapPos < pat->x && pat->x < MapPos + ScreenX) {
		switch (pat->moveDir)
		{
		case RIGHT:
			for (int i = 0; i < 3; i++)
			{
				if (pat->expressDellay > 50) {
					WriteBuffer(pat->x - MapPos, pat->y - i, pat->shape[4][2 - i], WHITE);
				}
				else {
					WriteBuffer(pat->x - MapPos, pat->y - i, pat->shape[1][2 - i], WHITE);
				}

			}
			break;
		case LEFT:
			for (int i = 0; i < 3; i++)
			{
				if (pat->expressDellay > 50) {
					WriteBuffer(pat->x - MapPos, pat->y - i, pat->shape[5][2 - i], WHITE);
				}
				else {
					WriteBuffer(pat->x - MapPos, pat->y - i, pat->shape[2][2 - i], WHITE);
				}

			}
			break;
		case STAND:
			for (int i = 0; i < 3; i++)
			{
				if (pat->expressDellay > 50) {
					WriteBuffer(pat->x - MapPos, pat->y - i, pat->shape[3][2 - i], WHITE);
				}
				else {
					WriteBuffer(pat->x - MapPos, pat->y - i, pat->shape[0][2 - i], WHITE);
				}

			}
			break;
		default:
			break;
		}
	}
	if (pat->bulletDelay[NOW_TIME] >= pat->bulletDelay[MAX_TIME])
	{
		PatBulletInit();
		pat->bulletDelay[NOW_TIME] = 0;
	}
	int nearEnemyNum = -1;
	int min = 9999999;
	for (int i = 0; i < patBulletCount; i++)
	{
		for (int j = 0; j < enemyCount; j++)
		{
			if (patBullet[i] != nullptr && enemy[j] != nullptr)
			{
				if (enemy[j]->x < min)
				{
					min = enemy[j]->x;
					nearEnemyNum = j;
				}
			}
		}
	}

	for (int i = 0; i < patBulletCount; i++)
	{
		if (patBullet[i] != nullptr && boss != nullptr) {
			if (MapPos < patBullet[i]->x && patBullet[i]->x < MapPos + ScreenX)
			{
				WriteBuffer(patBullet[i]->x - MapPos, patBullet[i]->y, patBullet[i]->shape[0], patBullet[i]->color);
			}
			if (patBullet[i]->x < boss->x)
			{
				patBullet[i]->x++;
			}
			if (patBullet[i]->x > boss->x)
			{
				patBullet[i]->x--;
			}
			if (patBullet[i]->y > boss->y)
			{
				patBullet[i]->y--;
			}
			if (patBullet[i]->y < boss->y)
			{
				patBullet[i]->y++;
			}
			if (boss == nullptr)
			{
				free(patBullet[i]);
				patBullet[i] = nullptr;
				break;
			}
		}
		if (patBullet[i] != nullptr && enemy[nearEnemyNum] != nullptr)
		{
			if (MapPos < patBullet[i]->x && patBullet[i]->x < MapPos + ScreenX) {
				WriteBuffer(patBullet[i]->x - MapPos, patBullet[i]->y, patBullet[i]->shape[0], patBullet[i]->color);
			}
			
			if (patBullet[i]->x < enemy[nearEnemyNum]->x)
			{
				patBullet[i]->x++;
			}
			if (patBullet[i]->x > enemy[nearEnemyNum]->x)
			{
				patBullet[i]->x--;
			}
			if (patBullet[i]->y > enemy[nearEnemyNum]->y)
			{
				patBullet[i]->y--;
			}
			if (patBullet[i]->y < enemy[nearEnemyNum]->y)
			{
				patBullet[i]->y++;
			}
			if (enemy[nearEnemyNum] == nullptr)
			{
				free(patBullet[i]);
				patBullet[i] = nullptr;
				break;
			}
		}
	}
	for (int i = 0; i < patBulletCount; i++)
	{
		if (patBullet[i] != nullptr && boss != nullptr) {
			if (patBullet[i]->x == boss->x && patBullet[i]->y == boss->y)
			{
				boss->hp -= patBullet[i]->damage;
				free(patBullet[i]);
				patBullet[i] = nullptr;
				break;
			}
		}
		for (int j = 0; j < enemyCount; j++)
		{
			if (patBullet[i] != nullptr && enemy[j] != nullptr)
			{
				if (patBullet[i]->x == enemy[j]->x && patBullet[i]->y == enemy[j]->y)
				{
					enemy[j]->hp -= patBullet[i]->damage;
					enemy[j]->isDownHp = true;
					free(patBullet[i]);
					patBullet[i] = nullptr;
					break;
				}
			}
		}
	}


}
void PatBulletInit()
{
	for (int i = 0; i < patBulletCount; i++)
	{
		if (patBullet[i] == nullptr)
		{
			patBullet[i] = (Bullet*)malloc(sizeof(Bullet));
			patBullet[i]->x = pat->x;
			patBullet[i]->y = pat->y;
			patBullet[i]->damage = pat->damage;
			patBullet[i]->color = LIGHTBLUE;
			patBullet[i]->shape[0] = "Θ";
			break;
		}
	}
}
#pragma endregion


#pragma region GameFunction
void ItemInit(int x, int y, int ItemNumber)  // 좌표,원하는 아이템번호
{
	for (int i = 0; i < ItemCount; i++)
	{
		if (item[i] == nullptr)
		{
			item[i] = (Item*)malloc(sizeof(Item));

			item[i]->x = x;
			item[i]->y = y;

			switch (ItemNumber)
			{
			case HEAL:

				item[i]->color = RED;
				item[i]->shape[0] = " ____";
				item[i]->shape[1] = "│+♡│";
				item[i]->shape[2] = "└───┘";
				item[i]->itemEffect = HEAL;
				break;
			case ADD_02:
				item[i]->color = YELLOW;
				item[i]->shape[0] = " ____";
				item[i]->shape[1] = "│+↑│";
				item[i]->shape[2] = "└───┘";
				item[i]->itemEffect = ADD_02;
				break;
			case ADD_bomb:
				item[i]->color = BLUE;
				item[i]->shape[0] = " ____";
				item[i]->shape[1] = "│+◎│";
				item[i]->shape[2] = "└───┘";
				item[i]->itemEffect = ADD_bomb;
				break;
			default:
				break;
			}
			break;
		}
	}
}
void MapItemInit(int(*Map)[MapX])
{

	for (int y = 0; y < MapY; y++)
	{
		for (int x = 0; x < MapX; x++)
		{
			if (Map[y][x] == 3)
			{
				ItemInit(x, y, (ItemEffect)(rand() % 3));
				Map[y][x] = 0;
			}
		}
	}
}
void ItemProRander()
{
	for (int i = 0; i < ItemCount; i++)
	{
		if (item[i] != nullptr && MapPos < item[i]->x && item[i]->x < MapPos + ScreenX)
		{
			for (int j = 0; j < 3; j++)
			{
				WriteBuffer(item[i]->x - MapPos, item[i]->y - j, item[i]->shape[2 - j], item[i]->color);

			}
			if ((item[i]->x == player->x || item[i]->x == player->x - 1 || item[i]->x == player->x + 1) && (item[i]->y == player->y || item[i]->y + 1 == player->y || item[i]->y - 1 == player->y))
			{
				switch (item[i]->itemEffect)
				{
				case HEAL:
					if (player->hp + 2 >= player->MaxHp) {
						player->hp = player->MaxHp;
					}
					else {
						player->hp += 2;
					}
					break;
				case ADD_02:
					if (player->bulletNum[RIFLE] >= 200)
					{
						player->bulletNum[RIFLE] = 200;
					}
					else
					{
						player->bulletNum[RIFLE] += 50;
					}
					break;
				case ADD_bomb:
					if (player->bulletNum[BOMB] >= 20)
					{
						player->bulletNum[BOMB] = 20;
					}
					else
					{
						player->bulletNum[BOMB] += 5;
					}
				default:
					break;
				}
				free(item[i]);
				item[i] = nullptr;
			}
		}
	}
}
void TrapInit(int(*Map)[MapX])
{

	for (int y = 0; y < MapY; y++)
	{
		for (int x = 0; x < MapX; x++)
		{
			if (Map[y][x] == 8)
			{
				for (int i = 0; i < TrapCount; i++)
				{
					if (trap[i] == nullptr)
					{
						trap[i] = (Trap*)malloc(sizeof(Trap));
						trap[i]->x = x;
						trap[i]->y = y;
						trap[i]->damage = 1;
						trap[i]->attackDelay[0] = 10;
						trap[i]->attackDelay[1] = 10;
						trap[i]->shape = "MM";
						trap[i]->color = DARKGRAY;
						Map[y][x] = 0;
						break;
					}
				}
			}
		}
	}

}
void TrapRander()
{
	for (int i = 0; i < TrapCount; i++)
	{
		if (trap[i] != nullptr && MapPos < trap[i]->x && trap[i]->x < MapPos + ScreenX)
		{
			WriteBuffer(trap[i]->x - MapPos, trap[i]->y, trap[i]->shape, trap[i]->color);
			if ((trap[i]->x == player->x && trap[i]->y == player->y) || (trap[i]->x == player->x + 1 && trap[i]->y == player->y))
			{
				trap[i]->attackDelay[1]++;
				if (trap[i]->attackDelay[1] >= trap[i]->attackDelay[0])
				{
					trap[i]->attackDelay[1] = 0;
					player->isDownHp = true;
					player->hp--;
				}
			}
		}
	}
}
void ShowKeyInfo()
{

	if (GetAsyncKeyState(VK_F1))
	{
		isKeyInfo = true;
	}
	if (isKeyInfo)
	{
		keyInfoDelay[1]++;
		for (int y = 0; y < 10; y++)
		{
			for (int x = 0; x < 50; x++)
			{
				switch (KeyInfoMap[y][x])
				{
				case 0:
					WriteBuffer(x + 8, y + 3, "  ", WHITE);
					break;
				case 1:
					WriteBuffer(x + 8, y + 3, "──", WHITE);
					break;
				case 2:
					WriteBuffer(x + 8, y + 3, " │ ", WHITE);
					break;
				case 3:
					WriteBuffer(x + 8, y + 3, "┌─", WHITE);
					break;
				case 4:
					WriteBuffer(x + 8, y + 3, "─┐ ", WHITE);
					break;
				case 5:
					WriteBuffer(x + 8, y + 3, "└─", WHITE);
					break;
				case 6:
					WriteBuffer(x + 8, y + 3, "─┘ ", WHITE);
					break;
				case 7:
					WriteBuffer(x + 8, y + 3, "│ ", WHITE);
					break;
				default:
					break;
				}
				WriteBuffer(0, 3, "     ↑", LIGHTMAGENTA);
				WriteBuffer(0, 5, "플레이어HP", LIGHTMAGENTA);
				WriteBuffer(0, 36, "     ↑", LIGHTMAGENTA);
				WriteBuffer(0, 38, "1,2번으로 무기 교체", LIGHTMAGENTA);
				WriteBuffer(12, 5, "- 이동 -", BROWN);
				WriteBuffer(10, 7, "      [↑]         ", WHITE);
				WriteBuffer(10, 9, "  [←][↓][→]    점프[SPACE]   ", WHITE);
				WriteBuffer(30, 5, "- 근접,공격 -", BROWN);
				WriteBuffer(31, 8, "[A]", WHITE);
				WriteBuffer(40, 5, "- 수류탄 -", BROWN);
				WriteBuffer(41, 8, "[F]", WHITE);
				WriteBuffer(50, 5, "- 무기 변경 -", BROWN);
				WriteBuffer(51, 8, "[1][2]", WHITE);
				WriteBuffer(51, 10, "창 닫기[F2]", CYAN);
			}
		}
		while (isKeyInfo && keyInfoDelay[1] >= keyInfoDelay[0])
		{
			if (GetAsyncKeyState(VK_F2))
			{
				isKeyInfo = false;
				keyInfoDelay[1] = 0;
				break;
			}
		}

	}
	else
	{
		WriteBuffer(30, 1, "도움말[F1]", BROWN);
	}

}
void TrapRelease()
{
	for (int i = 0; i < TrapCount; i++)
	{
		if (trap[i] != nullptr)
		{
			free(trap[i]);
			trap[i] = nullptr;
		}
	}
}
#pragma endregion

#pragma region Boss
void Boss1_Init(int x, int y)
{
	boss = (Boss*)malloc(sizeof(Boss));
	boss->x = x;
	boss->y = y;
	boss->MoveDelay = 0;
	boss->hp = 500;
	boss->floor = 0;
	boss->page = 0;
	boss->is_Move = false;
	boss->pageCount = 0;
	boss->expressDellay[NOW_TIME] = 0;
	boss->expressDellay[MAX_TIME] = 3;
	boss->state = 0;
	boss->shape[0][0] = "■■■■■■■■■■■■";
	boss->shape[0][1] = "                  |";
	boss->shape[0][2] = "             ___|_|_";
	boss->shape[0][3] = "============|(O)     _/";
	boss->shape[0][4] = "_____==|\\___/=====\\___";
	boss->shape[0][5] = "|______________________|";
	boss->shape[0][6] = "(=========/ \=========)";
	boss->shape[0][7] = " ─────────   ─────────";
	boss->shape[0][8] = "■■■■■■■■■■■■";

	boss->shape[1][0] = "■■■■■■■■■■■■";
	boss->shape[1][1] = "                  |";
	boss->shape[1][2] = "             ___|_|_";
	boss->shape[1][3] = "============|(o)     _/";
	boss->shape[1][4] = "_____==|\\___/=====\\___";
	boss->shape[1][5] = "|______________________|";
	boss->shape[1][6] = "(=========/ \=========)";
	boss->shape[1][7] = " ─────────   ─────────";
	boss->shape[1][8] = "■■■■■■■■■■■■";


	boss->shape[2][0] = "■■■■■■■■■■■■";
	boss->shape[2][1] = "                  |";
	boss->shape[2][2] = "             ___|_|_";
	boss->shape[2][3] = "============|(─)     _/";
	boss->shape[2][4] = "_____==|\\___/=====\\___";
	boss->shape[2][5] = "|______________________|";
	boss->shape[2][6] = "(=========/ \=========)";
	boss->shape[2][7] = " ─────────   ─────────";
	boss->shape[2][8] = "■■■■■■■■■■■■";

	boss->shape[3][0] = "■■■■■■■■■■■■";
	boss->shape[3][1] = "                  |";
	boss->shape[3][2] = "             ___|_|_";
	boss->shape[3][3] = "============|(X)     _/";
	boss->shape[3][4] = "_____==|\\___/=====\\___";
	boss->shape[3][5] = "|______________________|";
	boss->shape[3][6] = "(=========/ \=========)";
	boss->shape[3][7] = " ─────────   ─────────";
	boss->shape[3][8] = "■■■■■■■■■■■■";

	boss->shape[4][0] = "■■■■■■■■■■■■";
	boss->shape[4][1] = "                  |";
	boss->shape[4][2] = "             ___|_|_";
	boss->shape[4][3] = "============|(^)     _/";
	boss->shape[4][4] = "_____==|\\___/=====\\___";
	boss->shape[4][5] = "|______________________|";
	boss->shape[4][6] = "(=========/ \=========)";
	boss->shape[4][7] = " ─────────   ─────────";
	boss->shape[4][8] = "■■■■■■■■■■■■";
}
void Boss1_Rander()
{

	if (MapPos + ScreenX >= boss->x)
	{
		if (boss->state == 0 && 0 < boss->hp)
		{
			boss->expressDellay[NOW_TIME]++;
			if (boss->expressDellay[NOW_TIME] < 24)
			{
				for (int i = 0; i < 9; i++)
				{
					WriteBuffer(boss->x - MapPos, boss->y + i, boss->shape[0][i], RED);
				}
			}
			else if (boss->expressDellay[NOW_TIME] < 27)
			{
				for (int i = 0; i < 9; i++)
				{
					WriteBuffer(boss->x - MapPos, boss->y + i, boss->shape[1][i], RED);
				}
			}
			else if (boss->expressDellay[NOW_TIME] < 30)
			{
				for (int i = 0; i < 9; i++)
				{
					WriteBuffer(boss->x - MapPos, boss->y + i, boss->shape[2][i], RED);
				}
				if (boss->expressDellay[NOW_TIME] == 29)
				{
					boss->expressDellay[NOW_TIME] = 0;
				}
			}
		}
		if (boss->hp < 0)
		{
			for (int i = 0; i < 9; i++)
			{
				WriteBuffer(boss->x - MapPos, boss->y + i, boss->shape[3][i], RED);
			}
		}
		char* b = (char*)malloc(sizeof(char) * 10);
		_itoa(boss->hp, b, 10);
		WriteBuffer(boss->x - MapPos, boss->y - 5, b, WHITE);
		free(b);
		b = nullptr;
	}
}
void BossBulletInit()
{
	for (int i = 0; i < 10; i++)
	{
		if (bossBullet[i] == nullptr)
		{
			bossBullet[i] = (BossBullet*)malloc(sizeof(BossBullet));
			bossBullet[i]->x = boss->x;
			bossBullet[i]->y = boss->y + 2 + rand() % 3;
			bossBullet[i]->shape[0] = "   ";
			bossBullet[i]->shape[1] = "◀■■■■";
			break;
		}
	}
}
void BossBulletRender()
{
	for (int i = 0; i < 10; i++)
	{
		if (bossBullet[i] != nullptr)
		{
			if (MapPos < bossBullet[i]->x && bossBullet[i]->y < MapPos + ScreenX)
			{
				WriteBuffer(bossBullet[i]->x - MapPos, bossBullet[i]->y, bossBullet[i]->shape[0], LIGHTMAGENTA);
				WriteBuffer(bossBullet[i]->x - MapPos, bossBullet[i]->y + 1, bossBullet[i]->shape[1], LIGHTMAGENTA);
			}
		}
	}
}
void BossBulletProgress()
{
	for (int i = 0; i < 10; i++)
	{
		if (bossBullet[i] != nullptr)
		{
			bossBullet[i]->x--;
			if (bossBullet[i]->x < player->x && player->x < bossBullet[i]->x + 3 && bossBullet[i]->y < player->y && bossBullet[i]->y > player->y - 5)
			{
				player->isDownHp = true;
				player->hp -= 2;
				free(bossBullet[i]);
				bossBullet[i] = nullptr;
				break;
			}
			if (bossBullet[i]->x < MapX - ScreenX)
			{
				free(bossBullet[i]);
				bossBullet[i] = nullptr;
			}
		}
	}

}
void Boss1_progress()
{

	int speed = 0;
	if (boss->hp < 400 && 300 < boss->hp)
	{
		speed = 10;
	}
	else if (boss->hp < 300 && 200 < boss->hp)
	{
		speed = 20;
	}
	else if (boss->hp < 200 && 100 < boss->hp)
	{
		speed = 30;
	}
	else if (boss->hp < 100 && 0 < boss->hp)
	{
		speed = 40;
	}
	if (MapPos + ScreenX >= boss->x)
	{
		boss->pageCount++;
		boss->MoveDelay++;
		int randNum;
		if (boss->MoveDelay >= 50 - speed && !boss->is_Move)
		{
			do
			{
				randNum = rand() % 3;
			} while (boss->floor == rand() % 3);
			boss->floor = randNum;
			boss->is_Move = true;
		}
	}
	if (boss->is_Move)
	{
		if (MapY - boss->floor * 9 - 11 < boss->y)
		{
			boss->y--;
		}
		if (MapY - boss->floor * 9 - 11 > boss->y)
		{
			boss->y++;
		}
		if (MapY - boss->floor * 9 - 11 == boss->y)
		{
			boss->MoveDelay = 0;
			boss->is_Move = false;
		}
	}
	if (boss->x < player->x + 1 && player->x + 1 < boss->x + 11 && boss->y < player->y - 3 && player->y - 3 < boss->y + 8)
	{
		player->hp = -1;
	}
	if (boss->hp <= 0 && boss->floor != 0)
	{
		boss->floor = 0;
	}
	if (50 - speed <= boss->pageCount)
	{
		BossBulletInit();
		boss->pageCount = 0;
	}

}
void PlayerAttackBoss()
{
	for (int i = 0; i < playerBulletCount; i++)
	{

		for (int j = 0; j < 4; j++)
		{
			if (playerBullet[i] != nullptr && playerBullet[i]->bullet[j] != nullptr)
			{
				if (boss->x < playerBullet[i]->bullet[j]->x && boss->x + 11 > playerBullet[i]->bullet[j]->x &&
					boss->y < playerBullet[i]->bullet[j]->y && boss->y + 8 > playerBullet[i]->bullet[j]->y)
				{
					boss->hp -= playerBullet[i]->bullet[j]->damage;
					for (int k = 0; k < 4; k++)
					{
						free(playerBullet[i]->bullet[k]);
						playerBullet[i]->bullet[k] = nullptr;
					}
					free(playerBullet[i]);
					playerBullet[i] = nullptr;

				}
			}
		}
	}
}
#pragma endregion

#pragma region Buff
void RandomBuff_Init(int x, int y)
{
	buffBox = (BuffBox*)malloc(sizeof(BuffBox));
	buffBox->x = x;
	buffBox->isGive = false;
	buffBox->y = y;
	buffBox->Delay = 0;
	buffBox->buffEffect = (BuffEffect)(rand() % 4);
	buffBox->shape[0] = " _____ ";
	buffBox->shape[1] = "|-＆-||";
	buffBox->shape[2] = "|____||";
}
void RandomBuff_Rander()
{
	if (buffBox != nullptr)
	{
		for (int i = 0; i < 3; i++)
		{
			if (MapPos < buffBox->x && buffBox->x < MapPos + ScreenX)
			{
				WriteBuffer(buffBox->x - MapPos, buffBox->y + i, buffBox->shape[i], WHITE);
			}
		}
	}

}
void RandomBuff_Progress()
{
	if (buffBox != nullptr)
	{
		if (buffBox->x < player->x+1 && player->x+1 < buffBox->x+4 && buffBox->y - 3 < player->y && player->y < buffBox->y + 3)
		{
			switch (buffBox->buffEffect)
			{
			case PLUS_PAT_DAMAGE:
				WriteBuffer(30, 30, "펫 데미지가 +1증가!", WHITE);
				WriteBuffer(30, 32, "PRESS ENTER", WHITE);
				break;
			case PLUS_MAX_HP:
				WriteBuffer(30, 30, "최대 HP +2 증가!", WHITE);
				WriteBuffer(30, 32, "PRESS ENTER", WHITE);
				break;
			case PLUS_PISTOL_DAMAGE:
				WriteBuffer(30, 30, "기본 권총 데미지 +1 증가!", WHITE);
				WriteBuffer(30, 32, "PRESS ENTER", WHITE);
				break;
			case PLUS_RETRY:
				WriteBuffer(30, 30, "재도전 기회 +1", WHITE);
				WriteBuffer(30, 32, "PRESS ENTER", WHITE);
				break;

			}
			buffBox->Delay++;

			if (buffBox->Delay > 2)
			{
				while (true)
				{
					if (!buffBox->isGive)
					{
						switch (buffBox->buffEffect)
						{
						case PLUS_PAT_DAMAGE:
							pat->damage += 1;
							break;
						case PLUS_MAX_HP:
							player->MaxHp += 2;
							break;
						case PLUS_PISTOL_DAMAGE:
							player->pistolDamage += 1;
							break;
						case PLUS_RETRY:
							RetryCount + 1;
							break;

						}
						buffBox->isGive = true;
					}
					if (GetAsyncKeyState(VK_RETURN))
					{
						free(buffBox);
						buffBox = nullptr;
						break;
					}
				}
			}
		}
	}
}
#pragma endregion









